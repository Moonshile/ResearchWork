
-- This program is generated by trans2smv from its forte version. --

MODULE main

VAR
    curCache : {1, 2};
    curData : {1, 2};
    curLock : {1, 2};
    curMemory : {1, 2};
    curNode : {1, 2};
    lock.beUsed[1] : {c_true, c_false};
    lock.beUsed[2] : {c_true, c_false};
    lock.inProtection[1] : {c_true, c_false};
    lock.inProtection[2] : {c_true, c_false};
    lock.inProtection[3] : {c_true, c_false};
    lock.inProtection[4] : {c_true, c_false};
    lock.owner[1] : {1, 2};
    lock.owner[2] : {1, 2};
    memory.data[1] : {1, 2};
    memory.data[2] : {1, 2};
    node.cache.addr[1] : {1, 2};
    node.cache.addr[2] : {1, 2};
    node.cache.addr[3] : {1, 2};
    node.cache.addr[4] : {1, 2};
    node.cache.data[1] : {1, 2};
    node.cache.data[2] : {1, 2};
    node.cache.data[3] : {1, 2};
    node.cache.data[4] : {1, 2};
    node.cache.state[1] : {c_invalid, c_dirty, c_valid};
    node.cache.state[2] : {c_invalid, c_dirty, c_valid};
    node.cache.state[3] : {c_invalid, c_dirty, c_valid};
    node.cache.state[4] : {c_invalid, c_dirty, c_valid};
    node.firstRead[1] : {c_true, c_false};
    node.firstRead[2] : {c_true, c_false};
    node.firstRead[3] : {c_true, c_false};
    node.firstRead[4] : {c_true, c_false};
    node.hasLock[1] : {c_true, c_false};
    node.hasLock[2] : {c_true, c_false};
    repRule : {c_none, c_nlncr, c_nlncw, c_lncfr, c_lcfr, c_lncnfr};
    replace : {c_non, c_require, c_reqrepall, c_random, c_randinv, c_designated, c_torep, c_done, c_repalldone};
    choose_rule : -222 .. -1;

ASSIGN
    init(curCache) := 1;
    init(curData) := 1;
    init(curLock) := 1;
    init(curMemory) := 1;
    init(curNode) := 1;
    init(lock.beUsed[1]) := c_false;
    init(lock.beUsed[2]) := c_false;
    init(lock.inProtection[1]) := c_false;
    init(lock.inProtection[2]) := c_false;
    init(lock.inProtection[3]) := c_false;
    init(lock.inProtection[4]) := c_false;
    init(memory.data[1]) := 1;
    init(memory.data[2]) := 1;
    init(node.cache.state[1]) := c_invalid;
    init(node.cache.state[2]) := c_invalid;
    init(node.cache.state[3]) := c_invalid;
    init(node.cache.state[4]) := c_invalid;
    init(node.firstRead[1]) := c_true;
    init(node.firstRead[2]) := c_true;
    init(node.firstRead[3]) := c_true;
    init(node.firstRead[4]) := c_true;
    init(node.hasLock[1]) := c_false;
    init(node.hasLock[2]) := c_false;
    init(repRule) := c_none;
    init(replace) := c_non;
    init(choose_rule) := -1;
    next(curCache) := 
        case
            ((choose_rule = -5)&(replace = c_random)) : 1;
            ((choose_rule = -6)&(replace = c_random)) : 2;
            ((choose_rule = -7)&((replace = c_randinv)&(1 = curNode)&(node.cache.state[1] = c_invalid))) : 1;
            ((choose_rule = -8)&((replace = c_randinv)&(2 = curNode)&(node.cache.state[3] = c_invalid))) : 1;
            ((choose_rule = -9)&((replace = c_randinv)&(1 = curNode)&(node.cache.state[2] = c_invalid))) : 2;
            ((choose_rule = -10)&((replace = c_randinv)&(2 = curNode)&(node.cache.state[4] = c_invalid))) : 2;
            ((choose_rule = -35)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : 1;
            ((choose_rule = -36)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : 1;
            ((choose_rule = -37)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : 2;
            ((choose_rule = -38)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : 2;
            ((choose_rule = -39)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : 1;
            ((choose_rule = -40)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : 1;
            ((choose_rule = -41)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : 2;
            ((choose_rule = -42)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : 2;
            ((choose_rule = -43)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : 1;
            ((choose_rule = -44)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : 1;
            ((choose_rule = -45)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : 2;
            ((choose_rule = -46)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : 2;
            ((choose_rule = -47)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : 1;
            ((choose_rule = -48)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : 1;
            ((choose_rule = -49)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : 2;
            ((choose_rule = -50)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : 2;
            TRUE : curCache;
        esac;
    next(curData) := 
        case
            ((choose_rule = -191)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -192)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -193)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 1;
            ((choose_rule = -194)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 1;
            ((choose_rule = -195)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 2;
            ((choose_rule = -196)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 2;
            ((choose_rule = -197)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -198)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            TRUE : curData;
        esac;
    next(curLock) := 
        case
            ((choose_rule = -35)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : 1;
            ((choose_rule = -36)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : 1;
            ((choose_rule = -37)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : 1;
            ((choose_rule = -38)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : 1;
            ((choose_rule = -39)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : 1;
            ((choose_rule = -40)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : 1;
            ((choose_rule = -41)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : 1;
            ((choose_rule = -42)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : 1;
            ((choose_rule = -43)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : 2;
            ((choose_rule = -44)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : 2;
            ((choose_rule = -45)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : 2;
            ((choose_rule = -46)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : 2;
            ((choose_rule = -47)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : 2;
            ((choose_rule = -48)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : 2;
            ((choose_rule = -49)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : 2;
            ((choose_rule = -50)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : 2;
            ((choose_rule = -99)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -100)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 1;
            ((choose_rule = -101)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 1;
            ((choose_rule = -102)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 1;
            ((choose_rule = -103)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 2;
            ((choose_rule = -104)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 2;
            ((choose_rule = -105)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 2;
            ((choose_rule = -106)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -123)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -124)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 1;
            ((choose_rule = -125)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 1;
            ((choose_rule = -126)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 1;
            ((choose_rule = -127)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 2;
            ((choose_rule = -128)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 2;
            ((choose_rule = -129)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 2;
            ((choose_rule = -130)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            TRUE : curLock;
        esac;
    next(curMemory) := 
        case
            ((choose_rule = -35)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : 1;
            ((choose_rule = -36)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : 1;
            ((choose_rule = -37)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : 1;
            ((choose_rule = -38)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : 1;
            ((choose_rule = -39)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : 2;
            ((choose_rule = -40)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : 2;
            ((choose_rule = -41)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : 2;
            ((choose_rule = -42)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : 2;
            ((choose_rule = -43)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : 1;
            ((choose_rule = -44)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : 1;
            ((choose_rule = -45)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : 1;
            ((choose_rule = -46)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : 1;
            ((choose_rule = -47)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : 2;
            ((choose_rule = -48)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : 2;
            ((choose_rule = -49)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : 2;
            ((choose_rule = -50)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : 2;
            ((choose_rule = -99)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -100)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 1;
            ((choose_rule = -101)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 2;
            ((choose_rule = -102)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -103)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -104)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 1;
            ((choose_rule = -105)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 2;
            ((choose_rule = -106)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -123)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -124)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 1;
            ((choose_rule = -125)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 2;
            ((choose_rule = -126)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -127)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -128)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 1;
            ((choose_rule = -129)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 2;
            ((choose_rule = -130)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -171)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -172)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 1;
            ((choose_rule = -173)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 2;
            ((choose_rule = -174)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -191)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -192)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -193)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -194)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -195)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -196)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -197)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -198)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            TRUE : curMemory;
        esac;
    next(curNode) := 
        case
            ((choose_rule = -35)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : 1;
            ((choose_rule = -36)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : 2;
            ((choose_rule = -37)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : 1;
            ((choose_rule = -38)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : 2;
            ((choose_rule = -39)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : 1;
            ((choose_rule = -40)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : 2;
            ((choose_rule = -41)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : 1;
            ((choose_rule = -42)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : 2;
            ((choose_rule = -43)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : 1;
            ((choose_rule = -44)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : 2;
            ((choose_rule = -45)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : 1;
            ((choose_rule = -46)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : 2;
            ((choose_rule = -47)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : 1;
            ((choose_rule = -48)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : 2;
            ((choose_rule = -49)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : 1;
            ((choose_rule = -50)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : 2;
            ((choose_rule = -99)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -100)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 2;
            ((choose_rule = -101)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 1;
            ((choose_rule = -102)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -103)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -104)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 2;
            ((choose_rule = -105)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 1;
            ((choose_rule = -106)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -123)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -124)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 2;
            ((choose_rule = -125)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 1;
            ((choose_rule = -126)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -127)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -128)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 2;
            ((choose_rule = -129)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 1;
            ((choose_rule = -130)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -171)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : 1;
            ((choose_rule = -172)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : 2;
            ((choose_rule = -173)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : 1;
            ((choose_rule = -174)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : 2;
            ((choose_rule = -191)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -192)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 2;
            ((choose_rule = -193)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 1;
            ((choose_rule = -194)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -195)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -196)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 2;
            ((choose_rule = -197)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 1;
            ((choose_rule = -198)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            TRUE : curNode;
        esac;
    next(lock.beUsed[1]) := 
        case
            ((choose_rule = -1)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[1] = c_false))) : c_true;
            ((choose_rule = -2)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[1] = c_false))) : c_true;
            ((choose_rule = -203)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1))) : c_false;
            ((choose_rule = -204)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2))) : c_false;
            TRUE : lock.beUsed[1];
        esac;
    next(lock.beUsed[2]) := 
        case
            ((choose_rule = -3)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[2] = c_false))) : c_true;
            ((choose_rule = -4)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[2] = c_false))) : c_true;
            ((choose_rule = -205)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1))) : c_false;
            ((choose_rule = -206)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2))) : c_false;
            TRUE : lock.beUsed[2];
        esac;
    next(lock.inProtection[1]) := 
        case
            ((choose_rule = -19)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -20)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -21)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -22)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -51)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -52)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -53)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -54)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -59)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -60)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -61)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -62)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -83)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -84)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -85)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -86)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -107)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -108)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -109)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -110)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_true;
            ((choose_rule = -131)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -132)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -135)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -136)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -203)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1))) : c_false;
            ((choose_rule = -204)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2))) : c_false;
            TRUE : lock.inProtection[1];
        esac;
    next(lock.inProtection[2]) := 
        case
            ((choose_rule = -23)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -24)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -25)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -26)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -55)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -56)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -57)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -58)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -63)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -64)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -65)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -66)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -87)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -88)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -89)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -90)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -111)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -112)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -113)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -114)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_true;
            ((choose_rule = -133)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -134)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -137)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -138)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_true;
            ((choose_rule = -203)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1))) : c_false;
            ((choose_rule = -204)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2))) : c_false;
            TRUE : lock.inProtection[2];
        esac;
    next(lock.inProtection[3]) := 
        case
            ((choose_rule = -27)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -28)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -29)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -30)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -67)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -68)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -69)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -70)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -75)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -76)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -77)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -78)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -91)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -92)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -93)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -94)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -115)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -116)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -117)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -118)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_true;
            ((choose_rule = -139)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -140)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -143)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -144)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -205)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1))) : c_false;
            ((choose_rule = -206)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2))) : c_false;
            TRUE : lock.inProtection[3];
        esac;
    next(lock.inProtection[4]) := 
        case
            ((choose_rule = -31)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -32)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -33)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -34)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -71)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -72)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -73)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -74)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -79)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -80)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -81)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -82)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -95)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -96)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -97)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -98)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -119)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -120)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -121)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -122)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_true;
            ((choose_rule = -141)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -142)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -145)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -146)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_true;
            ((choose_rule = -205)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1))) : c_false;
            ((choose_rule = -206)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2))) : c_false;
            TRUE : lock.inProtection[4];
        esac;
    next(lock.owner[1]) := 
        case
            ((choose_rule = -1)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[1] = c_false))) : 1;
            ((choose_rule = -2)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[1] = c_false))) : 2;
            TRUE : lock.owner[1];
        esac;
    next(lock.owner[2]) := 
        case
            ((choose_rule = -3)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[2] = c_false))) : 1;
            ((choose_rule = -4)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[2] = c_false))) : 2;
            TRUE : lock.owner[2];
        esac;
    next(memory.data[1]) := 
        case
            ((choose_rule = -51)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -52)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -53)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -54)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -59)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -60)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -61)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -62)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -67)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -68)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -69)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -70)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -75)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -76)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -77)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -78)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -131)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -132)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -135)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -136)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -139)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -140)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -143)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -144)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -207)&((replace = c_reqrepall)&(node.cache.state[1] = c_dirty)&(1 = node.cache.addr[1]))) : node.cache.data[1];
            ((choose_rule = -208)&((replace = c_reqrepall)&(node.cache.state[3] = c_dirty)&(1 = node.cache.addr[3]))) : node.cache.data[3];
            ((choose_rule = -209)&((replace = c_reqrepall)&(node.cache.state[2] = c_dirty)&(1 = node.cache.addr[2]))) : node.cache.data[2];
            ((choose_rule = -210)&((replace = c_reqrepall)&(node.cache.state[4] = c_dirty)&(1 = node.cache.addr[4]))) : node.cache.data[4];
            ((choose_rule = -215)&((replace = c_torep)&(1 = curNode)&(1 = curCache)&(1 = node.cache.addr[1]))) : node.cache.data[1];
            ((choose_rule = -216)&((replace = c_torep)&(2 = curNode)&(1 = curCache)&(1 = node.cache.addr[3]))) : node.cache.data[3];
            ((choose_rule = -217)&((replace = c_torep)&(1 = curNode)&(2 = curCache)&(1 = node.cache.addr[2]))) : node.cache.data[2];
            ((choose_rule = -218)&((replace = c_torep)&(2 = curNode)&(2 = curCache)&(1 = node.cache.addr[4]))) : node.cache.data[4];
            TRUE : memory.data[1];
        esac;
    next(memory.data[2]) := 
        case
            ((choose_rule = -55)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -56)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -57)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -58)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -63)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -64)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -65)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -66)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -71)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -72)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -73)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -74)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -79)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -80)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -81)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -82)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -133)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -134)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -137)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -138)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -141)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -142)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -145)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -146)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -211)&((replace = c_reqrepall)&(node.cache.state[1] = c_dirty)&(2 = node.cache.addr[1]))) : node.cache.data[1];
            ((choose_rule = -212)&((replace = c_reqrepall)&(node.cache.state[3] = c_dirty)&(2 = node.cache.addr[3]))) : node.cache.data[3];
            ((choose_rule = -213)&((replace = c_reqrepall)&(node.cache.state[2] = c_dirty)&(2 = node.cache.addr[2]))) : node.cache.data[2];
            ((choose_rule = -214)&((replace = c_reqrepall)&(node.cache.state[4] = c_dirty)&(2 = node.cache.addr[4]))) : node.cache.data[4];
            ((choose_rule = -219)&((replace = c_torep)&(1 = curNode)&(1 = curCache)&(2 = node.cache.addr[1]))) : node.cache.data[1];
            ((choose_rule = -220)&((replace = c_torep)&(2 = curNode)&(1 = curCache)&(2 = node.cache.addr[3]))) : node.cache.data[3];
            ((choose_rule = -221)&((replace = c_torep)&(1 = curNode)&(2 = curCache)&(2 = node.cache.addr[2]))) : node.cache.data[2];
            ((choose_rule = -222)&((replace = c_torep)&(2 = curNode)&(2 = curCache)&(2 = node.cache.addr[4]))) : node.cache.data[4];
            TRUE : memory.data[2];
        esac;
    next(node.cache.addr[1]) := 
        case
            ((choose_rule = -83)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : 1;
            ((choose_rule = -87)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : 2;
            ((choose_rule = -91)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : 1;
            ((choose_rule = -95)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : 2;
            ((choose_rule = -107)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : 1;
            ((choose_rule = -111)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : 2;
            ((choose_rule = -115)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : 1;
            ((choose_rule = -119)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : 2;
            ((choose_rule = -163)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 1))) : 1;
            ((choose_rule = -167)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 2))) : 2;
            ((choose_rule = -175)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : 1;
            ((choose_rule = -179)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : 2;
            ((choose_rule = -183)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : 1;
            ((choose_rule = -187)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : 2;
            TRUE : node.cache.addr[1];
        esac;
    next(node.cache.addr[2]) := 
        case
            ((choose_rule = -85)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : 1;
            ((choose_rule = -89)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : 2;
            ((choose_rule = -93)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : 1;
            ((choose_rule = -97)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : 2;
            ((choose_rule = -109)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : 1;
            ((choose_rule = -113)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : 2;
            ((choose_rule = -117)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : 1;
            ((choose_rule = -121)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : 2;
            ((choose_rule = -165)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 1))) : 1;
            ((choose_rule = -169)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 2))) : 2;
            ((choose_rule = -177)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : 1;
            ((choose_rule = -181)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : 2;
            ((choose_rule = -185)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : 1;
            ((choose_rule = -189)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : 2;
            TRUE : node.cache.addr[2];
        esac;
    next(node.cache.addr[3]) := 
        case
            ((choose_rule = -84)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : 1;
            ((choose_rule = -88)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : 2;
            ((choose_rule = -92)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : 1;
            ((choose_rule = -96)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : 2;
            ((choose_rule = -108)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : 1;
            ((choose_rule = -112)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : 2;
            ((choose_rule = -116)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : 1;
            ((choose_rule = -120)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : 2;
            ((choose_rule = -164)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 1))) : 1;
            ((choose_rule = -168)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 2))) : 2;
            ((choose_rule = -176)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : 1;
            ((choose_rule = -180)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : 2;
            ((choose_rule = -184)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : 1;
            ((choose_rule = -188)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : 2;
            TRUE : node.cache.addr[3];
        esac;
    next(node.cache.addr[4]) := 
        case
            ((choose_rule = -86)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : 1;
            ((choose_rule = -90)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : 2;
            ((choose_rule = -94)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : 1;
            ((choose_rule = -98)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : 2;
            ((choose_rule = -110)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : 1;
            ((choose_rule = -114)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : 2;
            ((choose_rule = -118)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : 1;
            ((choose_rule = -122)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : 2;
            ((choose_rule = -166)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 1))) : 1;
            ((choose_rule = -170)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 2))) : 2;
            ((choose_rule = -178)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : 1;
            ((choose_rule = -182)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : 2;
            ((choose_rule = -186)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : 1;
            ((choose_rule = -190)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : 2;
            TRUE : node.cache.addr[4];
        esac;
    next(node.cache.data[1]) := 
        case
            ((choose_rule = -19)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -23)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -27)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -31)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -51)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -55)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -59)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -63)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -67)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -71)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -75)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -79)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -83)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -87)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -91)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -95)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -107)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -111)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -115)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -119)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -147)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -151)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 1;
            ((choose_rule = -155)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 2;
            ((choose_rule = -159)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -163)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 1))) : memory.data[1];
            ((choose_rule = -167)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 2))) : memory.data[2];
            ((choose_rule = -175)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : 1;
            ((choose_rule = -179)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : 1;
            ((choose_rule = -183)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : 2;
            ((choose_rule = -187)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : 2;
            TRUE : node.cache.data[1];
        esac;
    next(node.cache.data[2]) := 
        case
            ((choose_rule = -21)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -25)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -29)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -33)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -53)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -57)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -61)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -65)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -69)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -73)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -77)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -81)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -85)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -89)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -93)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -97)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -109)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -113)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -117)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -121)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -149)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -153)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 1;
            ((choose_rule = -157)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 2;
            ((choose_rule = -161)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -165)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 1))) : memory.data[1];
            ((choose_rule = -169)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 2))) : memory.data[2];
            ((choose_rule = -177)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : 1;
            ((choose_rule = -181)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : 1;
            ((choose_rule = -185)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : 2;
            ((choose_rule = -189)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : 2;
            TRUE : node.cache.data[2];
        esac;
    next(node.cache.data[3]) := 
        case
            ((choose_rule = -20)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -24)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -28)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -32)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -52)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -56)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -60)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -64)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -68)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -72)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -76)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -80)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -84)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -88)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -92)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -96)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -108)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -112)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -116)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -120)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -148)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -152)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 1;
            ((choose_rule = -156)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 2;
            ((choose_rule = -160)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -164)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 1))) : memory.data[1];
            ((choose_rule = -168)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 2))) : memory.data[2];
            ((choose_rule = -176)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : 1;
            ((choose_rule = -180)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : 1;
            ((choose_rule = -184)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : 2;
            ((choose_rule = -188)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : 2;
            TRUE : node.cache.data[3];
        esac;
    next(node.cache.data[4]) := 
        case
            ((choose_rule = -22)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -26)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -30)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -34)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -54)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -58)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 1;
            ((choose_rule = -62)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -66)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : 2;
            ((choose_rule = -70)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -74)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 1;
            ((choose_rule = -78)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -82)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : 2;
            ((choose_rule = -86)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -90)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -94)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -98)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -110)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : memory.data[1];
            ((choose_rule = -114)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : memory.data[2];
            ((choose_rule = -118)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : memory.data[1];
            ((choose_rule = -122)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : memory.data[2];
            ((choose_rule = -150)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 1;
            ((choose_rule = -154)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 1;
            ((choose_rule = -158)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : 2;
            ((choose_rule = -162)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : 2;
            ((choose_rule = -166)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 1))) : memory.data[1];
            ((choose_rule = -170)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 2))) : memory.data[2];
            ((choose_rule = -178)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : 1;
            ((choose_rule = -182)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : 1;
            ((choose_rule = -186)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : 2;
            ((choose_rule = -190)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : 2;
            TRUE : node.cache.data[4];
        esac;
    next(node.cache.state[1]) := 
        case
            ((choose_rule = -19)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -23)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -27)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -31)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -51)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -55)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -59)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -63)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -67)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -71)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -75)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -79)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -83)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -87)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -91)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -95)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -107)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -111)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -115)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -119)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -147)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_dirty;
            ((choose_rule = -151)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_dirty;
            ((choose_rule = -155)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_dirty;
            ((choose_rule = -159)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_dirty;
            ((choose_rule = -163)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 1))) : c_valid;
            ((choose_rule = -167)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 2))) : c_valid;
            ((choose_rule = -175)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : c_dirty;
            ((choose_rule = -179)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : c_dirty;
            ((choose_rule = -183)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : c_dirty;
            ((choose_rule = -187)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : c_dirty;
            ((choose_rule = -207)&((replace = c_reqrepall)&(node.cache.state[1] = c_dirty)&(1 = node.cache.addr[1]))) : c_invalid;
            ((choose_rule = -211)&((replace = c_reqrepall)&(node.cache.state[1] = c_dirty)&(2 = node.cache.addr[1]))) : c_invalid;
            ((choose_rule = -215)&((replace = c_torep)&(1 = curNode)&(1 = curCache)&(1 = node.cache.addr[1]))) : c_invalid;
            ((choose_rule = -219)&((replace = c_torep)&(1 = curNode)&(1 = curCache)&(2 = node.cache.addr[1]))) : c_invalid;
            TRUE : node.cache.state[1];
        esac;
    next(node.cache.state[2]) := 
        case
            ((choose_rule = -21)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -25)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -29)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -33)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -53)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -57)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -61)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -65)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -69)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -73)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -77)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -81)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -85)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -89)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -93)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -97)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -109)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -113)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -117)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -121)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -149)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_dirty;
            ((choose_rule = -153)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_dirty;
            ((choose_rule = -157)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_dirty;
            ((choose_rule = -161)&((replace = c_non)&(node.hasLock[1] = c_false)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_dirty;
            ((choose_rule = -165)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 1))) : c_valid;
            ((choose_rule = -169)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 2))) : c_valid;
            ((choose_rule = -177)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : c_dirty;
            ((choose_rule = -181)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : c_dirty;
            ((choose_rule = -185)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : c_dirty;
            ((choose_rule = -189)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : c_dirty;
            ((choose_rule = -209)&((replace = c_reqrepall)&(node.cache.state[2] = c_dirty)&(1 = node.cache.addr[2]))) : c_invalid;
            ((choose_rule = -213)&((replace = c_reqrepall)&(node.cache.state[2] = c_dirty)&(2 = node.cache.addr[2]))) : c_invalid;
            ((choose_rule = -217)&((replace = c_torep)&(1 = curNode)&(2 = curCache)&(1 = node.cache.addr[2]))) : c_invalid;
            ((choose_rule = -221)&((replace = c_torep)&(1 = curNode)&(2 = curCache)&(2 = node.cache.addr[2]))) : c_invalid;
            TRUE : node.cache.state[2];
        esac;
    next(node.cache.state[3]) := 
        case
            ((choose_rule = -20)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -24)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -28)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -32)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -52)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -56)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -60)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -64)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -68)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -72)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -76)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -80)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -84)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -88)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -92)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -96)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -108)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -112)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -116)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -120)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -148)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_dirty;
            ((choose_rule = -152)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_dirty;
            ((choose_rule = -156)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_dirty;
            ((choose_rule = -160)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_dirty;
            ((choose_rule = -164)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 1))) : c_valid;
            ((choose_rule = -168)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 2))) : c_valid;
            ((choose_rule = -176)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : c_dirty;
            ((choose_rule = -180)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : c_dirty;
            ((choose_rule = -184)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : c_dirty;
            ((choose_rule = -188)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : c_dirty;
            ((choose_rule = -208)&((replace = c_reqrepall)&(node.cache.state[3] = c_dirty)&(1 = node.cache.addr[3]))) : c_invalid;
            ((choose_rule = -212)&((replace = c_reqrepall)&(node.cache.state[3] = c_dirty)&(2 = node.cache.addr[3]))) : c_invalid;
            ((choose_rule = -216)&((replace = c_torep)&(2 = curNode)&(1 = curCache)&(1 = node.cache.addr[3]))) : c_invalid;
            ((choose_rule = -220)&((replace = c_torep)&(2 = curNode)&(1 = curCache)&(2 = node.cache.addr[3]))) : c_invalid;
            TRUE : node.cache.state[3];
        esac;
    next(node.cache.state[4]) := 
        case
            ((choose_rule = -22)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -26)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -30)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -34)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -54)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -58)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -62)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 1))&((lock.inProtection[1] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -66)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 1))&((lock.inProtection[2] = c_true) -> (1 = 1))))) : c_valid;
            ((choose_rule = -70)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -74)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -78)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&(((lock.inProtection[3] = c_true) -> (2 = 2))&((lock.inProtection[1] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -82)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&(((lock.inProtection[4] = c_true) -> (2 = 2))&((lock.inProtection[2] = c_true) -> (1 = 2))))) : c_valid;
            ((choose_rule = -86)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -90)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -94)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -98)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -110)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_valid;
            ((choose_rule = -114)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_valid;
            ((choose_rule = -118)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_valid;
            ((choose_rule = -122)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_valid;
            ((choose_rule = -150)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_dirty;
            ((choose_rule = -154)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_dirty;
            ((choose_rule = -158)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1)&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_dirty;
            ((choose_rule = -162)&((replace = c_non)&(node.hasLock[2] = c_false)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2)&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_dirty;
            ((choose_rule = -166)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 1))) : c_valid;
            ((choose_rule = -170)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 2))) : c_valid;
            ((choose_rule = -178)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : c_dirty;
            ((choose_rule = -182)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : c_dirty;
            ((choose_rule = -186)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : c_dirty;
            ((choose_rule = -190)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : c_dirty;
            ((choose_rule = -210)&((replace = c_reqrepall)&(node.cache.state[4] = c_dirty)&(1 = node.cache.addr[4]))) : c_invalid;
            ((choose_rule = -214)&((replace = c_reqrepall)&(node.cache.state[4] = c_dirty)&(2 = node.cache.addr[4]))) : c_invalid;
            ((choose_rule = -218)&((replace = c_torep)&(2 = curNode)&(2 = curCache)&(1 = node.cache.addr[4]))) : c_invalid;
            ((choose_rule = -222)&((replace = c_torep)&(2 = curNode)&(2 = curCache)&(2 = node.cache.addr[4]))) : c_invalid;
            TRUE : node.cache.state[4];
        esac;
    next(node.firstRead[1]) := 
        case
            ((choose_rule = -1)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[1] = c_false))) : c_true;
            ((choose_rule = -3)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[2] = c_false))) : c_true;
            ((choose_rule = -19)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_false;
            ((choose_rule = -21)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_false;
            ((choose_rule = -27)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_false;
            ((choose_rule = -29)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_false;
            ((choose_rule = -83)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_false;
            ((choose_rule = -85)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_false;
            ((choose_rule = -91)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_false;
            ((choose_rule = -93)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_false;
            TRUE : node.firstRead[1];
        esac;
    next(node.firstRead[2]) := 
        case
            ((choose_rule = -1)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[1] = c_false))) : c_true;
            ((choose_rule = -3)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[2] = c_false))) : c_true;
            ((choose_rule = -23)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_false;
            ((choose_rule = -25)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_false;
            ((choose_rule = -31)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_false;
            ((choose_rule = -33)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_false;
            ((choose_rule = -87)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_false;
            ((choose_rule = -89)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_false;
            ((choose_rule = -95)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_false;
            ((choose_rule = -97)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_false;
            TRUE : node.firstRead[2];
        esac;
    next(node.firstRead[3]) := 
        case
            ((choose_rule = -2)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[1] = c_false))) : c_true;
            ((choose_rule = -4)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[2] = c_false))) : c_true;
            ((choose_rule = -20)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_false;
            ((choose_rule = -22)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_false;
            ((choose_rule = -28)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_false;
            ((choose_rule = -30)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_false;
            ((choose_rule = -84)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_false;
            ((choose_rule = -86)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_false;
            ((choose_rule = -92)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_false;
            ((choose_rule = -94)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_false;
            TRUE : node.firstRead[3];
        esac;
    next(node.firstRead[4]) := 
        case
            ((choose_rule = -2)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[1] = c_false))) : c_true;
            ((choose_rule = -4)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[2] = c_false))) : c_true;
            ((choose_rule = -24)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_false;
            ((choose_rule = -26)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_false;
            ((choose_rule = -32)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_false;
            ((choose_rule = -34)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_false;
            ((choose_rule = -88)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_false;
            ((choose_rule = -90)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_false;
            ((choose_rule = -96)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_false;
            ((choose_rule = -98)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_false;
            TRUE : node.firstRead[4];
        esac;
    next(node.hasLock[1]) := 
        case
            ((choose_rule = -1)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[1] = c_false))) : c_true;
            ((choose_rule = -3)&((replace = c_non)&(node.hasLock[1] = c_false)&(lock.beUsed[2] = c_false))) : c_true;
            ((choose_rule = -203)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1))) : c_false;
            ((choose_rule = -205)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1))) : c_false;
            TRUE : node.hasLock[1];
        esac;
    next(node.hasLock[2]) := 
        case
            ((choose_rule = -2)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[1] = c_false))) : c_true;
            ((choose_rule = -4)&((replace = c_non)&(node.hasLock[2] = c_false)&(lock.beUsed[2] = c_false))) : c_true;
            ((choose_rule = -204)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2))) : c_false;
            ((choose_rule = -206)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2))) : c_false;
            TRUE : node.hasLock[2];
        esac;
    next(repRule) := 
        case
            ((choose_rule = -19)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -20)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -21)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -22)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -23)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -24)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -25)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -26)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -27)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -28)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -29)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -30)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -31)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -32)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -33)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -34)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -35)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : c_lcfr;
            ((choose_rule = -36)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : c_lcfr;
            ((choose_rule = -37)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : c_lcfr;
            ((choose_rule = -38)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : c_lcfr;
            ((choose_rule = -39)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : c_lcfr;
            ((choose_rule = -40)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : c_lcfr;
            ((choose_rule = -41)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : c_lcfr;
            ((choose_rule = -42)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : c_lcfr;
            ((choose_rule = -43)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : c_lcfr;
            ((choose_rule = -44)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : c_lcfr;
            ((choose_rule = -45)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : c_lcfr;
            ((choose_rule = -46)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : c_lcfr;
            ((choose_rule = -47)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : c_lcfr;
            ((choose_rule = -48)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : c_lcfr;
            ((choose_rule = -49)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : c_lcfr;
            ((choose_rule = -50)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : c_lcfr;
            ((choose_rule = -83)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -84)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -85)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -86)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -87)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -88)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -89)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -90)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -91)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -92)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -93)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -94)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -95)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -96)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -97)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -98)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -99)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_lncfr;
            ((choose_rule = -100)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_lncfr;
            ((choose_rule = -101)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_lncfr;
            ((choose_rule = -102)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_lncfr;
            ((choose_rule = -103)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_lncfr;
            ((choose_rule = -104)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_lncfr;
            ((choose_rule = -105)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_lncfr;
            ((choose_rule = -106)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_lncfr;
            ((choose_rule = -107)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -108)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -109)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -110)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_none;
            ((choose_rule = -111)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -112)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -113)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -114)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_none;
            ((choose_rule = -115)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -116)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -117)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -118)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_none;
            ((choose_rule = -119)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -120)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -121)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -122)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_none;
            ((choose_rule = -123)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_lncnfr;
            ((choose_rule = -124)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_lncnfr;
            ((choose_rule = -125)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_lncnfr;
            ((choose_rule = -126)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_lncnfr;
            ((choose_rule = -127)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_lncnfr;
            ((choose_rule = -128)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_lncnfr;
            ((choose_rule = -129)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_lncnfr;
            ((choose_rule = -130)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_lncnfr;
            ((choose_rule = -163)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 1))) : c_none;
            ((choose_rule = -164)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 1))) : c_none;
            ((choose_rule = -165)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 1))) : c_none;
            ((choose_rule = -166)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 1))) : c_none;
            ((choose_rule = -167)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 2))) : c_none;
            ((choose_rule = -168)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 2))) : c_none;
            ((choose_rule = -169)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 2))) : c_none;
            ((choose_rule = -170)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 2))) : c_none;
            ((choose_rule = -171)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_nlncr;
            ((choose_rule = -172)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_nlncr;
            ((choose_rule = -173)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_nlncr;
            ((choose_rule = -174)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_nlncr;
            ((choose_rule = -175)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : c_none;
            ((choose_rule = -176)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : c_none;
            ((choose_rule = -177)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : c_none;
            ((choose_rule = -178)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : c_none;
            ((choose_rule = -179)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : c_none;
            ((choose_rule = -180)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : c_none;
            ((choose_rule = -181)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : c_none;
            ((choose_rule = -182)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : c_none;
            ((choose_rule = -183)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : c_none;
            ((choose_rule = -184)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : c_none;
            ((choose_rule = -185)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : c_none;
            ((choose_rule = -186)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : c_none;
            ((choose_rule = -187)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : c_none;
            ((choose_rule = -188)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : c_none;
            ((choose_rule = -189)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : c_none;
            ((choose_rule = -190)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : c_none;
            ((choose_rule = -191)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_nlncw;
            ((choose_rule = -192)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_nlncw;
            ((choose_rule = -193)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_nlncw;
            ((choose_rule = -194)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_nlncw;
            ((choose_rule = -195)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_nlncw;
            ((choose_rule = -196)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_nlncw;
            ((choose_rule = -197)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_nlncw;
            ((choose_rule = -198)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_nlncw;
            TRUE : repRule;
        esac;
    next(replace) := 
        case
            ((choose_rule = -5)&(replace = c_random)) : c_designated;
            ((choose_rule = -6)&(replace = c_random)) : c_designated;
            ((choose_rule = -7)&((replace = c_randinv)&(1 = curNode)&(node.cache.state[1] = c_invalid))) : c_done;
            ((choose_rule = -8)&((replace = c_randinv)&(2 = curNode)&(node.cache.state[3] = c_invalid))) : c_done;
            ((choose_rule = -9)&((replace = c_randinv)&(1 = curNode)&(node.cache.state[2] = c_invalid))) : c_done;
            ((choose_rule = -10)&((replace = c_randinv)&(2 = curNode)&(node.cache.state[4] = c_invalid))) : c_done;
            ((choose_rule = -11)&((replace = c_designated)&(1 = curNode)&(1 = curCache)&(node.cache.state[1] = c_dirty))) : c_torep;
            ((choose_rule = -12)&((replace = c_designated)&(2 = curNode)&(1 = curCache)&(node.cache.state[3] = c_dirty))) : c_torep;
            ((choose_rule = -13)&((replace = c_designated)&(1 = curNode)&(2 = curCache)&(node.cache.state[2] = c_dirty))) : c_torep;
            ((choose_rule = -14)&((replace = c_designated)&(2 = curNode)&(2 = curCache)&(node.cache.state[4] = c_dirty))) : c_torep;
            ((choose_rule = -15)&((replace = c_designated)&(1 = curNode)&(1 = curCache)&(!(node.cache.state[1] = c_dirty)))) : c_done;
            ((choose_rule = -16)&((replace = c_designated)&(2 = curNode)&(1 = curCache)&(!(node.cache.state[3] = c_dirty)))) : c_done;
            ((choose_rule = -17)&((replace = c_designated)&(1 = curNode)&(2 = curCache)&(!(node.cache.state[2] = c_dirty)))) : c_done;
            ((choose_rule = -18)&((replace = c_designated)&(2 = curNode)&(2 = curCache)&(!(node.cache.state[4] = c_dirty)))) : c_done;
            ((choose_rule = -19)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -20)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -21)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -22)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -23)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -24)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -25)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -26)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -27)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -28)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -29)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -30)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -31)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -32)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -33)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -34)&((replace = c_done)&(repRule = c_lcfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -35)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : c_reqrepall;
            ((choose_rule = -36)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : c_reqrepall;
            ((choose_rule = -37)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : c_reqrepall;
            ((choose_rule = -38)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : c_reqrepall;
            ((choose_rule = -39)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : c_reqrepall;
            ((choose_rule = -40)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : c_reqrepall;
            ((choose_rule = -41)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : c_reqrepall;
            ((choose_rule = -42)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : c_reqrepall;
            ((choose_rule = -43)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 1))) : c_reqrepall;
            ((choose_rule = -44)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 1))) : c_reqrepall;
            ((choose_rule = -45)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 1))) : c_reqrepall;
            ((choose_rule = -46)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 1))) : c_reqrepall;
            ((choose_rule = -47)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[1] = c_invalid))&(node.cache.addr[1] = 2))) : c_reqrepall;
            ((choose_rule = -48)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[3] = c_invalid))&(node.cache.addr[3] = 2))) : c_reqrepall;
            ((choose_rule = -49)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(!(node.cache.state[2] = c_invalid))&(node.cache.addr[2] = 2))) : c_reqrepall;
            ((choose_rule = -50)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(!(node.cache.state[4] = c_invalid))&(node.cache.addr[4] = 2))) : c_reqrepall;
            ((choose_rule = -83)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -84)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -85)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -86)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -87)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -88)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -89)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -90)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -91)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -92)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -93)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -94)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -95)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -96)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -97)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -98)&((replace = c_done)&(repRule = c_lncfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -99)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_reqrepall;
            ((choose_rule = -100)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_reqrepall;
            ((choose_rule = -101)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_reqrepall;
            ((choose_rule = -102)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_reqrepall;
            ((choose_rule = -103)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_reqrepall;
            ((choose_rule = -104)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_reqrepall;
            ((choose_rule = -105)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_true)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_reqrepall;
            ((choose_rule = -106)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_true)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_reqrepall;
            ((choose_rule = -107)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -108)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -109)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -110)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 1))) : c_non;
            ((choose_rule = -111)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -112)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -113)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -114)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 1))) : c_non;
            ((choose_rule = -115)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -116)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -117)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -118)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curLock = 2))) : c_non;
            ((choose_rule = -119)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -120)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -121)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -122)&((replace = c_done)&(repRule = c_lncnfr)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curLock = 2))) : c_non;
            ((choose_rule = -123)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_require;
            ((choose_rule = -124)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_require;
            ((choose_rule = -125)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_require;
            ((choose_rule = -126)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[1] = c_true)&(lock.owner[1] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_require;
            ((choose_rule = -127)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_require;
            ((choose_rule = -128)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[3] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_require;
            ((choose_rule = -129)&((replace = c_non)&(node.hasLock[1] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 1)&(node.firstRead[2] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_require;
            ((choose_rule = -130)&((replace = c_non)&(node.hasLock[2] = c_true)&(lock.beUsed[2] = c_true)&(lock.owner[2] = 2)&(node.firstRead[4] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_require;
            ((choose_rule = -163)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 1))) : c_non;
            ((choose_rule = -164)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 1))) : c_non;
            ((choose_rule = -165)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 1))) : c_non;
            ((choose_rule = -166)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 1))) : c_non;
            ((choose_rule = -167)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 1)&(curMemory = 2))) : c_non;
            ((choose_rule = -168)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 1)&(curMemory = 2))) : c_non;
            ((choose_rule = -169)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 1)&(curCache = 2)&(curMemory = 2))) : c_non;
            ((choose_rule = -170)&((replace = c_done)&(repRule = c_nlncr)&(curNode = 2)&(curCache = 2)&(curMemory = 2))) : c_non;
            ((choose_rule = -171)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1)))))) : c_require;
            ((choose_rule = -172)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1)))))) : c_require;
            ((choose_rule = -173)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2)))))) : c_require;
            ((choose_rule = -174)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2)))))) : c_require;
            ((choose_rule = -175)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : c_non;
            ((choose_rule = -176)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 1))) : c_non;
            ((choose_rule = -177)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : c_non;
            ((choose_rule = -178)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 1))) : c_non;
            ((choose_rule = -179)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : c_non;
            ((choose_rule = -180)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 1))) : c_non;
            ((choose_rule = -181)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : c_non;
            ((choose_rule = -182)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 1))) : c_non;
            ((choose_rule = -183)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : c_non;
            ((choose_rule = -184)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 1)&(curData = 2))) : c_non;
            ((choose_rule = -185)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : c_non;
            ((choose_rule = -186)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 1)&(curData = 2))) : c_non;
            ((choose_rule = -187)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : c_non;
            ((choose_rule = -188)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 1)&(curMemory = 2)&(curData = 2))) : c_non;
            ((choose_rule = -189)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 1)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : c_non;
            ((choose_rule = -190)&((replace = c_done)&(repRule = c_nlncw)&(curNode = 2)&(curCache = 2)&(curMemory = 2)&(curData = 2))) : c_non;
            ((choose_rule = -191)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_require;
            ((choose_rule = -192)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_require;
            ((choose_rule = -193)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_require;
            ((choose_rule = -194)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_require;
            ((choose_rule = -195)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 1)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_require;
            ((choose_rule = -196)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 1)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 1))))&((lock.inProtection[3] = c_false)&(lock.inProtection[1] = c_false)))) : c_require;
            ((choose_rule = -197)&((replace = c_non)&(node.hasLock[1] = c_false)&(((node.cache.state[2] = c_invalid)|(!(node.cache.addr[2] = 2)))&((node.cache.state[1] = c_invalid)|(!(node.cache.addr[1] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_require;
            ((choose_rule = -198)&((replace = c_non)&(node.hasLock[2] = c_false)&(((node.cache.state[4] = c_invalid)|(!(node.cache.addr[4] = 2)))&((node.cache.state[3] = c_invalid)|(!(node.cache.addr[3] = 2))))&((lock.inProtection[4] = c_false)&(lock.inProtection[2] = c_false)))) : c_require;
            ((choose_rule = -199)&((replace = c_require)&(1 = curNode)&(!((!(node.cache.state[2] = c_invalid))&(!(node.cache.state[1] = c_invalid)))))) : c_randinv;
            ((choose_rule = -200)&((replace = c_require)&(2 = curNode)&(!((!(node.cache.state[4] = c_invalid))&(!(node.cache.state[3] = c_invalid)))))) : c_randinv;
            ((choose_rule = -201)&((replace = c_require)&(1 = curNode)&((!(node.cache.state[2] = c_invalid))&(!(node.cache.state[1] = c_invalid))))) : c_random;
            ((choose_rule = -202)&((replace = c_require)&(2 = curNode)&((!(node.cache.state[4] = c_invalid))&(!(node.cache.state[3] = c_invalid))))) : c_random;
            ((choose_rule = -215)&((replace = c_torep)&(1 = curNode)&(1 = curCache)&(1 = node.cache.addr[1]))) : c_done;
            ((choose_rule = -216)&((replace = c_torep)&(2 = curNode)&(1 = curCache)&(1 = node.cache.addr[3]))) : c_done;
            ((choose_rule = -217)&((replace = c_torep)&(1 = curNode)&(2 = curCache)&(1 = node.cache.addr[2]))) : c_done;
            ((choose_rule = -218)&((replace = c_torep)&(2 = curNode)&(2 = curCache)&(1 = node.cache.addr[4]))) : c_done;
            ((choose_rule = -219)&((replace = c_torep)&(1 = curNode)&(1 = curCache)&(2 = node.cache.addr[1]))) : c_done;
            ((choose_rule = -220)&((replace = c_torep)&(2 = curNode)&(1 = curCache)&(2 = node.cache.addr[3]))) : c_done;
            ((choose_rule = -221)&((replace = c_torep)&(1 = curNode)&(2 = curCache)&(2 = node.cache.addr[2]))) : c_done;
            ((choose_rule = -222)&((replace = c_torep)&(2 = curNode)&(2 = curCache)&(2 = node.cache.addr[4]))) : c_done;
            TRUE : replace;
        esac;
    next(choose_rule) := 
        case
            (choose_rule = -222) : -1;
            TRUE : choose_rule - 1;
        esac;
SPEC
    AG (((replace = c_non)&(node.hasLock[1] = c_true)&(node.firstRead[1] = c_false)&(node.cache.state[1] = c_valid)&(node.cache.addr[1] = 1)) -> (node.cache.data[1] = memory.data[1]))
SPEC
    AG (((replace = c_non)&(node.hasLock[2] = c_true)&(node.firstRead[3] = c_false)&(node.cache.state[3] = c_valid)&(node.cache.addr[3] = 1)) -> (node.cache.data[3] = memory.data[1]))
SPEC
    AG (((replace = c_non)&(node.hasLock[1] = c_true)&(node.firstRead[1] = c_false)&(node.cache.state[2] = c_valid)&(node.cache.addr[2] = 1)) -> (node.cache.data[2] = memory.data[1]))
SPEC
    AG (((replace = c_non)&(node.hasLock[2] = c_true)&(node.firstRead[3] = c_false)&(node.cache.state[4] = c_valid)&(node.cache.addr[4] = 1)) -> (node.cache.data[4] = memory.data[1]))
SPEC
    AG (((replace = c_non)&(node.hasLock[1] = c_true)&(node.firstRead[2] = c_false)&(node.cache.state[1] = c_valid)&(node.cache.addr[1] = 2)) -> (node.cache.data[1] = memory.data[2]))
SPEC
    AG (((replace = c_non)&(node.hasLock[2] = c_true)&(node.firstRead[4] = c_false)&(node.cache.state[3] = c_valid)&(node.cache.addr[3] = 2)) -> (node.cache.data[3] = memory.data[2]))
SPEC
    AG (((replace = c_non)&(node.hasLock[1] = c_true)&(node.firstRead[2] = c_false)&(node.cache.state[2] = c_valid)&(node.cache.addr[2] = 2)) -> (node.cache.data[2] = memory.data[2]))
SPEC
    AG (((replace = c_non)&(node.hasLock[2] = c_true)&(node.firstRead[4] = c_false)&(node.cache.state[4] = c_valid)&(node.cache.addr[4] = 2)) -> (node.cache.data[4] = memory.data[2]))
SPEC
    AG (((replace = c_non)&(node.hasLock[1] = c_true)) -> ((!(((lock.beUsed[2] = c_false)|(!(lock.owner[2] = 1)))&((lock.beUsed[1] = c_false)|(!(lock.owner[1] = 1)))))&((((2 = 2)|(lock.beUsed[2] = c_false)|(lock.beUsed[2] = c_false)|(!(lock.owner[2] = 1))|(!(lock.owner[2] = 1)))&((2 = 1)|(lock.beUsed[2] = c_false)|(lock.beUsed[1] = c_false)|(!(lock.owner[2] = 1))|(!(lock.owner[1] = 1))))&(((1 = 2)|(lock.beUsed[1] = c_false)|(lock.beUsed[2] = c_false)|(!(lock.owner[1] = 1))|(!(lock.owner[2] = 1)))&((1 = 1)|(lock.beUsed[1] = c_false)|(lock.beUsed[1] = c_false)|(!(lock.owner[1] = 1))|(!(lock.owner[1] = 1)))))))
SPEC
    AG (((replace = c_non)&(node.hasLock[2] = c_true)) -> ((!(((lock.beUsed[2] = c_false)|(!(lock.owner[2] = 2)))&((lock.beUsed[1] = c_false)|(!(lock.owner[1] = 2)))))&((((2 = 2)|(lock.beUsed[2] = c_false)|(lock.beUsed[2] = c_false)|(!(lock.owner[2] = 2))|(!(lock.owner[2] = 2)))&((2 = 1)|(lock.beUsed[2] = c_false)|(lock.beUsed[1] = c_false)|(!(lock.owner[2] = 2))|(!(lock.owner[1] = 2))))&(((1 = 2)|(lock.beUsed[1] = c_false)|(lock.beUsed[2] = c_false)|(!(lock.owner[1] = 2))|(!(lock.owner[2] = 2)))&((1 = 1)|(lock.beUsed[1] = c_false)|(lock.beUsed[1] = c_false)|(!(lock.owner[1] = 2))|(!(lock.owner[1] = 2)))))))
