This program should be regarded as a DEBUGGING aid, not as a 
certifier of correctness.
Call with the -l flag or read the license file for terms
and conditions of use.
Run this program with "-h" for the list of options.

Bugs, questions, and comments should be directed to
"melatti@di.uniroma1.it".

CMurphi compiler last modified date: Jun  2 2014
Include files last modified date:    Jul 12 2011
==========================================================================

==========================================================================
Caching Murphi Release 5.4.9
Finite-state Concurrent System Verifier.

Caching Murphi Release 5.4.9 is based on various versions of Murphi.
Caching Murphi Release 5.4.9 :
Copyright (C) 2009-2012 by Sapienza University of Rome.
Murphi release 3.1 :
Copyright (C) 1992 - 1999 by the Board of Trustees of
Leland Stanford Junior University.

==========================================================================

Protocol: godson-t-ori-nolasting

Algorithm:
	Verification by breadth first search.
	with symmetry algorithm 3 -- Heuristic Small Memory Normalization
	with permutation trial limit 10.

Memory usage:

	* The size of each state is 160 bits (rounded up to 24 bytes).
	* The memory allocated for the hash table and state queue is
	  2147 Mbytes.
	  With two words of overhead per state, the maximum size of
	  the state space is 65472067 states.
	   * Use option "-k" or "-m" to increase this, if necessary.
	* Capacity in queue for breadth-first search: 6547206 states.
	   * Change the constant gPercentActiveStates in mu_prolog.inc
	     to increase this, if necessary.

The following is the error trace for the error:

	Invariant "cache data equals memory, a:1, j:1, i:1" failed.

Startstate Init, d:1 fired.
memory[1].addr:1
memory[1].data:1
memory[2].addr:2
memory[2].data:1
lock[1].id:1
lock[1].owner:Undefined
lock[1].beUsed:false
node[1].cache[1].state:INVALID
node[1].cache[1].addr:Undefined
node[1].cache[1].data:Undefined
node[1].hasLock:false
node[1].firstRead[1]:true
node[1].firstRead[2]:true
node[2].cache[1].state:INVALID
node[2].cache[1].addr:Undefined
node[2].cache[1].data:Undefined
node[2].hasLock:false
node[2].firstRead[1]:true
node[2].firstRead[2]:true
random:1
----------

Rule Acquire, l:1, i:1 fired.
memory[1].addr:1
memory[1].data:1
memory[2].addr:2
memory[2].data:1
lock[1].id:1
lock[1].owner:1
lock[1].beUsed:true
node[1].cache[1].state:INVALID
node[1].cache[1].addr:Undefined
node[1].cache[1].data:Undefined
node[1].hasLock:true
node[1].firstRead[1]:true
node[1].firstRead[2]:true
node[2].cache[1].state:INVALID
node[2].cache[1].addr:Undefined
node[2].cache[1].data:Undefined
node[2].hasLock:false
node[2].firstRead[1]:true
node[2].firstRead[2]:true
random:1
----------

Rule Write no lock(write back), not in cache, d:2, a:1, i:2 fired.
memory[1].addr:1
memory[1].data:1
memory[2].addr:2
memory[2].data:1
lock[1].id:1
lock[1].owner:1
lock[1].beUsed:true
node[1].cache[1].state:INVALID
node[1].cache[1].addr:Undefined
node[1].cache[1].data:Undefined
node[1].hasLock:true
node[1].firstRead[1]:true
node[1].firstRead[2]:true
node[2].cache[1].state:DIRTY
node[2].cache[1].addr:1
node[2].cache[1].data:2
node[2].hasLock:false
node[2].firstRead[1]:true
node[2].firstRead[2]:true
random:1
----------

Rule Read right lock, first read, l:1, a:1, i:1 fired.
memory[1].addr:1
memory[1].data:1
memory[2].addr:2
memory[2].data:1
lock[1].id:1
lock[1].owner:1
lock[1].beUsed:true
node[1].cache[1].state:VALID
node[1].cache[1].addr:1
node[1].cache[1].data:1
node[1].hasLock:true
node[1].firstRead[1]:false
node[1].firstRead[2]:true
node[2].cache[1].state:DIRTY
node[2].cache[1].addr:1
node[2].cache[1].data:2
node[2].hasLock:false
node[2].firstRead[1]:true
node[2].firstRead[2]:true
random:1
----------

Rule Write no lock(write back), not in cache, d:1, a:2, i:2 fired.
The last state of the trace (in full) is:
memory[1].addr:1
memory[1].data:2
memory[2].addr:2
memory[2].data:1
lock[1].id:1
lock[1].owner:1
lock[1].beUsed:true
node[1].cache[1].state:VALID
node[1].cache[1].addr:1
node[1].cache[1].data:1
node[1].hasLock:true
node[1].firstRead[1]:false
node[1].firstRead[2]:true
node[2].cache[1].state:DIRTY
node[2].cache[1].addr:2
node[2].cache[1].data:1
node[2].hasLock:false
node[2].firstRead[1]:true
node[2].firstRead[2]:true
random:1
----------

End of the error trace.

==========================================================================

Result:

	Invariant "cache data equals memory, a:1, j:1, i:1" failed.

State Space Explored:

	712 states, 3001 rules fired in 1.27s.

Analysis of State Space:

	There are rules that are never fired.
	If you are running with symmetry, this may be why.  Otherwise,
	please run this program with "-pr" for the rules information.
