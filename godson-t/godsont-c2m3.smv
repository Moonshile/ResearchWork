--Godson-T Cache protocol, by zhouyan--
MODULE Lock
DEFINE
	N := 3;
VAR 
	id : 1..2;
	owner : 0..N;
	
MODULE Cache_Record
VAR
	state : {invalid, dirty, valid};
	addr : 1..3;
	data : boolean;

MODULE Memory_Record
VAR
	addr : 1..3;
	data : boolean;

MODULE main
DEFINE
	N := 3;
VAR
	memory : array 0..2 of Memory_Record;
	lasting : boolean;
	lockSet : array 1..2 of Lock;	
	node[1] : Node(1);
	node[2] : Node(2);
	node[3] : Node(3);
	random : 1..2;
	
	--some transitions
	SetRandom1 : process RandomSet1(random);
	SetRandom2 : process RandomSet2(random);
	
	N1_L1_Acquire : process Acquire(1, 1,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
	N1_L2_Acquire : process Acquire(1, 2,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
	N2_L1_Acquire : process Acquire(2, 1,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
  N2_L2_Acquire : process Acquire(2, 2,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
	N3_L1_Acquire : process Acquire(3, 1,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
	N3_L2_Acquire : process Acquire(3, 2,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);

  N1_L1_Release : process Release(1, 1,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
	N1_L2_Release : process Release(1, 2,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
	N2_L1_Release : process Release(2, 1,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
  N2_L2_Release : process Release(2, 2,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
	N3_L1_Release : process Release(3, 1,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
	N3_L2_Release : process Release(3, 2,
	lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
	node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
	node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
	node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock);
  
  N1_L0_A1_NLNC_Read : process NLNC_Read(1, 0, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A2_NLNC_Read : process NLNC_Read(1, 0, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A3_NLNC_Read : process NLNC_Read(1, 0, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A1_NLNC_Read : process NLNC_Read(2, 0, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A2_NLNC_Read : process NLNC_Read(2, 0, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A3_NLNC_Read : process NLNC_Read(2, 0, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
	N3_L0_A1_NLNC_Read : process NLNC_Read(3, 0, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A2_NLNC_Read : process NLNC_Read(3, 0, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A3_NLNC_Read : process NLNC_Read(3, 0, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  
  --------------------------------------
 	N1_L1_A1_LF_Read : process LF_Read(1, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A2_LF_Read : process LF_Read(1, 1, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
   N1_L1_A3_LF_Read : process LF_Read(1, 1, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A1_LF_Read : process LF_Read(1, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A2_LF_Read : process LF_Read(1, 2, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A3_LF_Read : process LF_Read(1, 2, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A1_LF_Read : process LF_Read(2, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A2_LF_Read : process LF_Read(2, 1, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A3_LF_Read : process LF_Read(2, 1, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A1_LF_Read : process LF_Read(2, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A2_LF_Read : process LF_Read(2, 2, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A3_LF_Read : process LF_Read(2, 2, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A1_LF_Read : process LF_Read(3, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A2_LF_Read : process LF_Read(3, 1, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A3_LF_Read : process LF_Read(3, 1, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A1_LF_Read : process LF_Read(3, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A2_LF_Read : process LF_Read(3, 2, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A3_LF_Read : process LF_Read(3, 2, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  ---------------------------------------
  
  N1_L1_A1_LNFNC_Read : process LNFNC_Read(1, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A2_LNFNC_Read : process LNFNC_Read(1, 1, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A3_LNFNC_Read : process LNFNC_Read(1, 1, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A1_LNFNC_Read : process LNFNC_Read(1, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A2_LNFNC_Read : process LNFNC_Read(1, 2, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A3_LNFNC_Read : process LNFNC_Read(1, 2, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A1_LNFNC_Read : process LNFNC_Read(2, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A2_LNFNC_Read : process LNFNC_Read(2, 1, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A3_LNFNC_Read : process LNFNC_Read(2, 1, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A1_LNFNC_Read : process LNFNC_Read(2, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A2_LNFNC_Read : process LNFNC_Read(2, 2, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A3_LNFNC_Read : process LNFNC_Read(2, 2, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A1_LNFNC_Read : process LNFNC_Read(3, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A2_LNFNC_Read : process LNFNC_Read(3, 1, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A3_LNFNC_Read : process LNFNC_Read(3, 1, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A1_LNFNC_Read : process LNFNC_Read(3, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A2_LNFNC_Read : process LNFNC_Read(3, 2, 2,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
 	N3_L2_A3_LNFNC_Read : process LNFNC_Read(3, 2, 3,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  
  --------------------------------------- 
  N1_L0_A1_D0_NLNC_Write : process NLNC_Write(1, 0, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A1_D1_NLNC_Write : process NLNC_Write(1, 0, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A2_D0_NLNC_Write : process NLNC_Write(1, 0, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A2_D1_NLNC_Write : process NLNC_Write(1, 0, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A3_D0_NLNC_Write : process NLNC_Write(1, 0, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A3_D1_NLNC_Write : process NLNC_Write(1, 0, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A1_D0_NLNC_Write : process NLNC_Write(2, 0, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A1_D1_NLNC_Write : process NLNC_Write(2, 0, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A2_D0_NLNC_Write : process NLNC_Write(2, 0, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A2_D1_NLNC_Write : process NLNC_Write(2, 0, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A3_D0_NLNC_Write : process NLNC_Write(2, 0, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A3_D1_NLNC_Write : process NLNC_Write(2, 0, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A1_D0_NLNC_Write : process NLNC_Write(3, 0, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A1_D1_NLNC_Write : process NLNC_Write(3, 0, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A2_D0_NLNC_Write : process NLNC_Write(3, 0, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A2_D1_NLNC_Write : process NLNC_Write(3, 0, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
	N3_L0_A3_D0_NLNC_Write : process NLNC_Write(3, 0, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A3_D1_NLNC_Write : process NLNC_Write(3, 0, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
   --------------------------------------- 
   
  N1_L0_A1_D0_NLC_Write : process NLC_Write(1, 0, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A1_D1_NLC_Write : process NLC_Write(1, 0, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A2_D0_NLC_Write : process NLC_Write(1, 0, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A2_D1_NLC_Write : process NLC_Write(1, 0, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A3_D0_NLC_Write : process NLC_Write(1, 0, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L0_A3_D1_NLC_Write : process NLC_Write(1, 0, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A1_D0_NLC_Write : process NLC_Write(2, 0, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A1_D1_NLC_Write : process NLC_Write(2, 0, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A2_D0_NLC_Write : process NLC_Write(2, 0, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A2_D1_NLC_Write : process NLC_Write(2, 0, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A3_D0_NLC_Write : process NLC_Write(2, 0, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L0_A3_D1_NLC_Write : process NLC_Write(2, 0, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A1_D0_NLC_Write : process NLC_Write(3, 0, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A1_D1_NLC_Write : process NLC_Write(3, 0, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A2_D0_NLC_Write : process NLC_Write(3, 0, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A2_D1_NLC_Write : process NLC_Write(3, 0, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A3_D0_NLC_Write : process NLC_Write(3, 0, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L0_A3_D1_NLC_Write : process NLC_Write(3, 0, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
   --------------------------------------- 
   
  
  N1_L1_A1_D0_LNC_Write : process LNC_Write(1, 1, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A1_D1_LNC_Write : process LNC_Write(1, 1, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A2_D0_LNC_Write : process LNC_Write(1, 1, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A2_D1_LNC_Write : process LNC_Write(1, 1, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A3_D0_LNC_Write : process LNC_Write(1, 1, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A3_D1_LNC_Write : process LNC_Write(1, 1, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A1_D0_LNC_Write : process LNC_Write(1, 2, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A1_D1_LNC_Write : process LNC_Write(1, 2, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A2_D0_LNC_Write : process LNC_Write(1, 2, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A2_D1_LNC_Write : process LNC_Write(1, 2, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A3_D0_LNC_Write : process LNC_Write(1, 2, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A3_D1_LNC_Write : process LNC_Write(1, 2, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A1_D0_LNC_Write : process LNC_Write(2, 1, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A1_D1_LNC_Write : process LNC_Write(2, 1, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A2_D0_LNC_Write : process LNC_Write(2, 1, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A2_D1_LNC_Write : process LNC_Write(2, 1, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A3_D0_LNC_Write : process LNC_Write(2, 1, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A3_D1_LNC_Write : process LNC_Write(2, 1, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A1_D0_LNC_Write : process LNC_Write(2, 2, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A1_D1_LNC_Write : process LNC_Write(2, 2, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A2_D0_LNC_Write : process LNC_Write(2, 2, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A2_D1_LNC_Write : process LNC_Write(2, 2, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A3_D0_LNC_Write : process LNC_Write(2, 2, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A3_D1_LNC_Write : process LNC_Write(2, 2, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A1_D0_LNC_Write : process LNC_Write(3, 1, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A1_D1_LNC_Write : process LNC_Write(3, 1, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A2_D0_LNC_Write : process LNC_Write(3, 1, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A2_D1_LNC_Write : process LNC_Write(3, 1, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A3_D0_LNC_Write : process LNC_Write(3, 1, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A3_D1_LNC_Write : process LNC_Write(3, 1, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A1_D0_LNC_Write : process LNC_Write(3, 2, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A1_D1_LNC_Write : process LNC_Write(3, 2, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A2_D0_LNC_Write : process LNC_Write(3, 2, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A2_D1_LNC_Write : process LNC_Write(3, 2, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A3_D0_LNC_Write : process LNC_Write(3, 2, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A3_D1_LNC_Write : process LNC_Write(3, 2, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
   --------------------------------------- 
    
  N1_L1_A1_D0_LC_Write : process LC_Write(1, 1, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A1_D1_LC_Write : process LC_Write(1, 1, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A2_D0_LC_Write : process LC_Write(1, 1, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A2_D1_LC_Write : process LC_Write(1, 1, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A3_D0_LC_Write : process LC_Write(1, 1, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L1_A3_D1_LC_Write : process LC_Write(1, 1, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A1_D0_LC_Write : process LC_Write(1, 2, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A1_D1_LC_Write : process LC_Write(1, 2, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A2_D0_LC_Write : process LC_Write(1, 2, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A2_D1_LC_Write : process LC_Write(1, 2, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A3_D0_LC_Write : process LC_Write(1, 2, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N1_L2_A3_D1_LC_Write : process LC_Write(1, 2, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A1_D0_LC_Write : process LC_Write(2, 1, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A1_D1_LC_Write : process LC_Write(2, 1, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A2_D0_LC_Write : process LC_Write(2, 1, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A2_D1_LC_Write : process LC_Write(2, 1, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A3_D0_LC_Write : process LC_Write(2, 1, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L1_A3_D1_LC_Write : process LC_Write(2, 1, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A1_D0_LC_Write : process LC_Write(2, 2, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A1_D1_LC_Write : process LC_Write(2, 2, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A2_D0_LC_Write : process LC_Write(2, 2, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A2_D1_LC_Write : process LC_Write(2, 2, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A3_D0_LC_Write : process LC_Write(2, 2, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N2_L2_A3_D1_LC_Write : process LC_Write(2, 2, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A1_D0_LC_Write : process LC_Write(3, 1, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A1_D1_LC_Write : process LC_Write(3, 1, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A2_D0_LC_Write : process LC_Write(3, 1, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A2_D1_LC_Write : process LC_Write(3, 1, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A3_D0_LC_Write : process LC_Write(3, 1, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L1_A3_D1_LC_Write : process LC_Write(3, 1, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A1_D0_LC_Write : process LC_Write(3, 2, 1, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A1_D1_LC_Write : process LC_Write(3, 2, 1, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A2_D0_LC_Write : process LC_Write(3, 2, 2, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A2_D1_LC_Write : process LC_Write(3, 2, 2, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A3_D0_LC_Write : process LC_Write(3, 2, 3, 0,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
  N3_L2_A3_D1_LC_Write : process LC_Write(3, 2, 3, 1,
  memory[0].addr, memory[0].data, memory[1].addr, memory[1].data, memory[2].addr, memory[2].data, lasting,
  node[1].cache[1].state, node[1].cache[1].addr, node[1].cache[1].data, node[1].cache[2].state, node[1].cache[2].addr, node[1].cache[2].data, node[1].firstRead[0], node[1].firstRead[1], node[1].firstRead[2], node[1].hasLock,
  node[2].cache[1].state, node[2].cache[1].addr, node[2].cache[1].data, node[2].cache[2].state, node[2].cache[2].addr, node[2].cache[2].data, node[2].firstRead[0], node[2].firstRead[1], node[2].firstRead[2], node[2].hasLock,
  node[3].cache[1].state, node[3].cache[1].addr, node[3].cache[1].data, node[3].cache[2].state, node[3].cache[2].addr, node[3].cache[2].data, node[3].firstRead[0], node[3].firstRead[1], node[3].firstRead[2], node[3].hasLock,
  lockSet[1].id, lockSet[1].owner, lockSet[2].id, lockSet[2].owner,
  random);
   --------------------------------------- 
  
SPEC
	AG ((node[2].cache[1].state != invalid & node[2].cache[2].state != invalid) -> (node[2].cache[1].addr != node[2].cache[2].addr))

SPEC
  AG((node[1].hasLock | node[2].hasLock) ->  ((!node[1].firstRead[0] & node[1].cache[1].state = valid & node[1].cache[1].addr = memory[0].addr & lasting -> node[1].cache[1].data = memory[0].data) | (!node[2].firstRead[0] & node[2].cache[2].state = valid & node[2].cache[2].addr = memory[0].addr & lasting -> node[2].cache[2].data = memory[0].data)))



ASSIGN
	init(lockSet[1].id) := 1;
	init(lockSet[1].owner) := 0;
	init(lockSet[2].id) := 2;
	init(lockSet[2].owner) := 0;
	init(memory[0].addr) := 1;
	init(memory[1].addr) := 2;
	init(memory[2].addr) := 3;
	init(memory[0].data) := 0;
	init(memory[1].data) := 0;
	init(memory[2].data) := 0;
	init(lasting) := 0;
	init(random) := 1;

MODULE Node(id)
VAR
	cache : array 1..2 of Cache_Record;
	firstRead : array 0..2 of boolean;
	hasLock : boolean;

ASSIGN
	init(cache[1].state) := invalid;
	init(cache[2].state) := invalid;
	init(firstRead[0]) := 1;
	init(firstRead[1]) := 1;
	init(firstRead[2]) := 1;
	init(hasLock) := 0;

MODULE RandomSet1(random)
ASSIGN
	next(random) := 
		case
			1 : 1;
		esac;
		
MODULE RandomSet2(random)
ASSIGN
	next(random) := 
		case
			1 : 2;
		esac;

MODULE Acquire(nodeId, lockId, 
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner, 
firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3)
ASSIGN
	next(lock_1_owner) :=
		case
 			lock_1_id = lockId & (lock_1_owner = 0 & lock_2_owner = 0) & ((nodeId = 1 & hasLock_n1 = 0) | (nodeId = 2 & hasLock_n2 = 0) | (nodeId = 3 & hasLock_n3 = 0)) : nodeId;
 			1 : lock_1_owner;
 		esac;
	next(lock_2_owner) :=
 		case
 			lock_2_id = lockId & (lock_1_owner = 0 & lock_2_owner = 0) & ((nodeId = 1 & hasLock_n1 = 0) | (nodeId = 2 & hasLock_n2 = 0) | (nodeId = 3 & hasLock_n3 = 0)) : nodeId;
 			1 : lock_2_owner;
 		esac;
 	next(firstRead_1_n1) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 1 & hasLock_n1 = 0) : 1;
 			1 : firstRead_1_n1;
 		esac;
	next(firstRead_2_n1) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 1 & hasLock_n1 = 0) : 1;
 			1 : firstRead_2_n1;
 		esac;
 	next(firstRead_3_n1) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 1 & hasLock_n1 = 0) : 1;
 			1 : firstRead_3_n1;
 		esac;
 	next(hasLock_n1) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 1 & hasLock_n1 = 0) : 1;
 			1 : hasLock_n1;
 		esac;
 		
 	--similar to node[2] and node[3]
 	next(firstRead_1_n2) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 2 & hasLock_n2 = 0) : 1;
 			1 : firstRead_1_n2;
 		esac;
	next(firstRead_2_n2) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 2 & hasLock_n2 = 0) : 1;
 			1 : firstRead_2_n2;
 		esac;
 	next(firstRead_3_n2) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 2 & hasLock_n2 = 0) : 1;
 			1 : firstRead_3_n2;
 		esac;
 	next(hasLock_n2) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 2 & hasLock_n2 = 0) : 1;
 			1 : hasLock_n2;
 		esac;
 	next(firstRead_1_n3) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 3 & hasLock_n3 = 0) : 1;
 			1 : firstRead_1_n3;
 		esac;
	next(firstRead_2_n3) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 3 & hasLock_n3 = 0) : 1;
 			1 : firstRead_2_n3;
 		esac;
 	next(firstRead_3_n3) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 3 & hasLock_n3 = 0) : 1;
 			1 : firstRead_3_n3;
 		esac;
 	next(hasLock_n3) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = 0) | (lock_2_id = lockId & lock_2_owner = 0))  & (lock_1_owner = 0 & lock_2_owner = 0) & (nodeId = 3 & hasLock_n3 = 0) : 1;
 			1 : hasLock_n3;
 		esac;
 		
MODULE Release(nodeId, lockId, 
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner, 
firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3)
ASSIGN
	next(lock_1_owner) :=
 		case
 			lock_1_id = lockId & lock_1_owner = nodeId & ((nodeId = 1 & hasLock_n1 = 1) | (nodeId = 2 & hasLock_n2 = 1) | (nodeId = 3 & hasLock_n3 = 1)) : 0;
 			1 : lock_1_owner;
 		esac;
 	next(lock_2_owner) :=
 		case
 			lock_2_id = lockId & lock_2_owner = nodeId & ((nodeId = 1 & hasLock_n1 = 1) | (nodeId = 2 & hasLock_n2 = 1) | (nodeId = 3 & hasLock_n3 = 1)) : 0;
 			1 : lock_2_owner;
 		esac;
 	next(hasLock_n1) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = nodeId) | (lock_2_id = lockId & lock_2_owner = nodeId)) & (nodeId = 1 & hasLock_n1 = 1) : 0;
 			1 : hasLock_n1;
 		esac;
 	
 	--similar to node[2] and node[3]
 	next(hasLock_n2) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = nodeId) | (lock_2_id = lockId & lock_2_owner = nodeId)) & (nodeId = 2 & hasLock_n2 = 1) : 0;
 			1 : hasLock_n2;
 		esac;
 	next(hasLock_n3) :=
 		case
 			((lock_1_id = lockId & lock_1_owner = nodeId) | (lock_2_id = lockId & lock_2_owner = nodeId)) & (nodeId = 3 & hasLock_n3 = 1) : 0;
 			1 : hasLock_n3;
 		esac;

MODULE NLNC_Read(nodeId, lockId, memAddr,
mem_1_addr, mem_1_data, mem_2_addr, mem_2_data, mem_3_addr, mem_3_data, lasting_1,
cache_state_1_n1, cache_addr_1_n1, cache_data_1_n1, cache_state_2_n1, cache_addr_2_n1, cache_data_2_n1, firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
cache_state_1_n2, cache_addr_1_n2, cache_data_1_n2, cache_state_2_n2, cache_addr_2_n2, cache_data_2_n2, firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
cache_state_1_n3, cache_addr_1_n3, cache_data_1_n3, cache_state_2_n3, cache_addr_2_n3, cache_data_2_n3, firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3,
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner,
random)
--no lock, not in cache
ASSIGN
	next(cache_addr_1_n1) :=
		case		
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & memAddr = mem_1_addr : mem_1_addr;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & memAddr = mem_2_addr : mem_2_addr;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & memAddr = mem_3_addr : mem_3_addr;
			1 : cache_addr_1_n1;
		esac;		
	next(cache_data_1_n1) :=
	  case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & memAddr = mem_1_addr : mem_1_data;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & memAddr = mem_2_addr : mem_2_data;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & memAddr = mem_3_addr : mem_3_data;
			1 : cache_data_1_n1;
		esac;
	next(cache_state_1_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : valid;
			1 : cache_state_1_n1;
		esac;		
	next(cache_addr_2_n1) :=
		case		
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & memAddr = mem_1_addr : mem_1_addr;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & memAddr = mem_2_addr : mem_2_addr;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & memAddr = mem_3_addr : mem_3_addr;
			1 : cache_addr_2_n1;
		esac;		
	next(cache_data_2_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & memAddr = mem_1_addr : mem_1_data;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & memAddr = mem_2_addr : mem_2_data;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & memAddr = mem_3_addr : mem_3_data;
			1 : cache_data_2_n1;
		esac;
	next(cache_state_2_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : valid;
			1 : cache_state_2_n1;
		esac;		
	next(mem_1_data) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;			
			1 : mem_1_data;
		esac;	
	next(mem_2_data) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_2_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_2_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_2_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_2_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_2_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_2_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;			
			1 : mem_2_data;
		esac;
	next(mem_3_data) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_3_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_3_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_3_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_3_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_3_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_3_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;			
			1 : mem_2_data;
		esac;	


	next(lasting_1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & mem_1_data != cache_data_1_n1 : 0;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & mem_1_data != cache_data_2_n1 : 0;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & mem_1_data != cache_data_1_n2 : 0;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & mem_1_data != cache_data_2_n2 : 0;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & mem_1_data != cache_data_1_n3 : 0;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & mem_1_data != cache_data_2_n3 : 0;			
			1 : lasting_1;
		esac;	



	--similar to node[2] and node[3]
		next(cache_addr_1_n2) :=
		case		
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & memAddr = mem_1_addr : mem_1_addr;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & memAddr = mem_2_addr : mem_2_addr;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & memAddr = mem_3_addr : mem_3_addr;
			1 : cache_addr_1_n2;
		esac;		
	next(cache_data_1_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & memAddr = mem_1_addr : mem_1_data;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & memAddr = mem_2_addr : mem_2_data;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & memAddr = mem_3_addr : mem_3_data;
			1 : cache_data_1_n2;
		esac;
	next(cache_state_1_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : valid;
			1 : cache_state_1_n2;
		esac;		
	next(cache_addr_2_n2) :=
		case		
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & memAddr = mem_1_addr : mem_1_addr;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & memAddr = mem_2_addr : mem_2_addr;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & memAddr = mem_3_addr : mem_3_addr;
			1 : cache_addr_2_n2;
		esac;		
	next(cache_data_2_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & memAddr = mem_1_addr : mem_1_data;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & memAddr = mem_2_addr : mem_2_data;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & memAddr = mem_3_addr : mem_3_data;
			1 : cache_data_2_n2;
		esac;
	next(cache_state_2_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : valid;
			1 : cache_state_2_n2;
		esac;	
		next(cache_addr_1_n3) :=
		case		
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & memAddr = mem_1_addr : mem_1_addr;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & memAddr = mem_2_addr : mem_2_addr;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & memAddr = mem_3_addr : mem_3_addr;
			1 : cache_addr_1_n3;
		esac;		
	next(cache_data_1_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & memAddr = mem_1_addr : mem_1_data;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & memAddr = mem_2_addr : mem_2_data;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & memAddr = mem_3_addr : mem_3_data;
			1 : cache_data_1_n3;
		esac;
	next(cache_state_1_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : valid;
			1 : cache_state_1_n3;
		esac;		
	next(cache_addr_2_n3) :=
		case		
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & memAddr = mem_1_addr : mem_1_addr;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & memAddr = mem_2_addr : mem_2_addr;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & memAddr = mem_3_addr : mem_3_addr;
			1 : cache_addr_2_n3;
		esac;		
	next(cache_data_2_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & memAddr = mem_1_addr : mem_1_data;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & memAddr = mem_2_addr : mem_2_data;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & memAddr = mem_3_addr : mem_3_data;
			1 : cache_data_2_n3;
		esac;
	next(cache_state_2_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : valid;
			1 : cache_state_2_n3;
		esac;	
		
MODULE LF_Read(nodeId, lockId, memAddr,
mem_1_addr, mem_1_data, mem_2_addr, mem_2_data, mem_3_addr, mem_3_data, lasting_1, 
cache_state_1_n1, cache_addr_1_n1, cache_data_1_n1, cache_state_2_n1, cache_addr_2_n1, cache_data_2_n1, firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
cache_state_1_n2, cache_addr_1_n2, cache_data_1_n2, cache_state_2_n2, cache_addr_2_n2, cache_data_2_n2, firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
cache_state_1_n3, cache_addr_1_n3, cache_data_1_n3, cache_state_2_n3, cache_addr_2_n3, cache_data_2_n3, firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3,
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner,
random)
--has right lock, first read
ASSIGN
	next(cache_addr_1_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n1 = 1 : mem_1_addr;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n1 = 1 : mem_2_addr;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n1 = 1 : mem_3_addr;
			1 : cache_addr_1_n1;
		esac;		
	next(cache_data_1_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n1 = 1 & !(cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr) : mem_1_data;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n1 = 1 & !(cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_2_addr) : mem_2_data;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n1 = 1 & !(cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_3_addr) : mem_3_data;
			1 : cache_data_1_n1;
		esac;
	next(cache_state_1_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & ((memAddr = mem_1_addr & firstRead_1_n1 = 1) | (memAddr = mem_2_addr & firstRead_2_n1 = 1) | (memAddr = mem_3_addr & firstRead_3_n1 = 1)) & cache_state_1_n1 != valid : valid;
			1 : cache_state_1_n1;
		esac;
	next(cache_addr_2_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n1 = 1 : mem_1_addr;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n1 = 1 : mem_2_addr;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n1 = 1 : mem_3_addr;
			1 : cache_addr_2_n1;
		esac;		
	next(cache_data_2_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n1 = 1 & !(cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr) : mem_1_data;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n1 = 1 & !(cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_2_addr) : mem_2_data;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n1 = 1 & !(cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_3_addr) : mem_3_data;
			1 : cache_data_2_n1;
		esac;
	next(cache_state_2_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & ((memAddr = mem_1_addr & firstRead_1_n1 = 1) | (memAddr = mem_2_addr & firstRead_2_n1 = 1) | (memAddr = mem_3_addr & firstRead_3_n1 = 1)) & cache_state_2_n1 != valid : valid;
			1 : cache_state_2_n1;
		esac;	
	next(firstRead_1_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n1 = 1 : 0;
			1 : firstRead_1_n1;
		esac;
	next(firstRead_2_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n1 = 1 : 0;
			1 : firstRead_2_n1;
		esac;
	next(firstRead_3_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n1 = 1 : 0;
			1 : firstRead_3_n1;
		esac;	
		
	next(mem_1_data) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n1 = 1 & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr : cache_data_1_n1;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n1 = 1 & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr : cache_data_2_n1;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n2 = 1 & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr : cache_data_1_n2;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n2 = 1 & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr : cache_data_2_n2;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n3 = 1 & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr : cache_data_1_n3;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n3 = 1 & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr : cache_data_2_n3;
			1 : mem_1_data;
		esac;	
	next(mem_2_data) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_2_n1 = 1 & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_2_addr : cache_data_1_n1;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_2_n1 = 1 & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_2_addr : cache_data_2_n1;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_2_n2 = 1 & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_2_addr : cache_data_1_n2;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_2_n2 = 1 & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_2_addr : cache_data_2_n2;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_2_n3 = 1 & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_2_addr : cache_data_1_n3;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_2_n3 = 1 & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_2_addr : cache_data_2_n3;
			1 : mem_2_data;
		esac;
	next(mem_3_data) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_3_n1 = 1 & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_3_addr : cache_data_1_n1;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_3_n1 = 1 & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_3_addr : cache_data_2_n1;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_3_n2 = 1 & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_3_addr : cache_data_1_n2;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_3_n2 = 1 & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_3_addr : cache_data_2_n2;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_3_n3 = 1 & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_3_addr : cache_data_1_n3;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_3_n3 = 1 & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_3_addr : cache_data_2_n3;
			1 : mem_3_data;
		esac;
		



	next(lasting_1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n1 = 1 & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) | (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr)) & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr & mem_1_data != cache_data_1_n1 : 0;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n1 = 1 & (((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr)) & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr & mem_1_data != cache_data_2_n1 : 0;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n2 = 1 & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr & mem_1_data != cache_data_1_n2 : 0;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n2 = 1 & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr & mem_1_data != cache_data_2_n2 : 0;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n3 = 1 & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr & mem_1_data != cache_data_1_n3 : 0;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & firstRead_1_n3 = 1 & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr & mem_1_data != cache_data_2_n3 : 0;
			1 : lasting_1;
		esac;	

	next(cache_addr_1_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n2 = 1 : mem_1_addr;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n2 = 1 : mem_2_addr;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n2 = 1 : mem_3_addr;
			1 : cache_addr_1_n2;
		esac;		
	next(cache_data_1_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n2 = 1 & !(cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr) : mem_1_data;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n2 = 1 & !(cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_2_addr) : mem_2_data;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n2 = 1 & !(cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_3_addr) : mem_3_data;
			1 : cache_data_1_n2;
		esac;
	next(cache_state_1_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) | (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr)) & ((memAddr = mem_1_addr & firstRead_1_n2 = 1) | (memAddr = mem_2_addr & firstRead_2_n2 = 1) | (memAddr = mem_3_addr & firstRead_3_n2 = 1)) & cache_state_1_n2 != valid : valid;
			1 : cache_state_1_n2;
		esac;
	next(cache_addr_2_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n2 = 1 : mem_1_addr;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n2 = 1 : mem_2_addr;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n2 = 1 : mem_3_addr;
			1 : cache_addr_2_n2;
		esac;		
	next(cache_data_2_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n2 = 1 & !(cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr) : mem_1_data;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n2 = 1 & !(cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_2_addr) : mem_2_data;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n2 = 1 & !(cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_3_addr) : mem_3_data;
			1 : cache_data_2_n2;
		esac;
	next(cache_state_2_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr)) & ((memAddr = mem_1_addr & firstRead_1_n2 = 1) | (memAddr = mem_2_addr & firstRead_2_n2 = 1) | (memAddr = mem_3_addr & firstRead_3_n2 = 1)) & cache_state_2_n2 != valid : valid;
			1 : cache_state_2_n2;
		esac;	
	next(firstRead_1_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n2 = 1 : 0;
			1 : firstRead_1_n2;
		esac;
	next(firstRead_2_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n2 = 1 : 0;
			1 : firstRead_2_n2;
		esac;
	next(firstRead_3_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n2 = 1 : 0;
			1 : firstRead_3_n2;
		esac;	
		
	next(cache_addr_1_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n3 = 1 : mem_1_addr;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n3 = 1 : mem_2_addr;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n3 = 1 : mem_3_addr;
			1 : cache_addr_1_n3;
		esac;		
	next(cache_data_1_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n3 = 1 & !(cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr) : mem_1_data;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n3 = 1 & !(cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_2_addr) : mem_2_data;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n3 = 1 & !(cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_3_addr) : mem_3_data;
			1 : cache_data_1_n3;
		esac;
	next(cache_state_1_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) | (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr)) & ((memAddr = mem_1_addr & firstRead_1_n3 = 1) | (memAddr = mem_2_addr & firstRead_2_n3 = 1) | (memAddr = mem_3_addr & firstRead_3_n3 = 1)) & cache_state_1_n3 != valid : valid;
			1 : cache_state_1_n3;
		esac;
	next(cache_addr_2_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n3 = 1 : mem_1_addr;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n3 = 1 : mem_2_addr;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n3 = 1 : mem_3_addr;
			1 : cache_addr_2_n3;
		esac;		
	next(cache_data_2_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & memAddr = mem_1_addr & firstRead_1_n3 = 1 & !(cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr) : mem_1_data;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & memAddr = mem_2_addr & firstRead_2_n3 = 1 & !(cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_2_addr) : mem_2_data;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & memAddr = mem_3_addr & firstRead_3_n3 = 1 & !(cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_3_addr) : mem_3_data;
			1 : cache_data_2_n3;
		esac;
	next(cache_state_2_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)) & ((memAddr = mem_1_addr & firstRead_1_n3 = 1) | (memAddr = mem_2_addr & firstRead_2_n3 = 1) | (memAddr = mem_3_addr & firstRead_3_n3 = 1)) & cache_state_2_n3 != valid : valid;
			1 : cache_state_2_n3;
		esac;	
	next(firstRead_1_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n3 = 1 : 0;
			1 : firstRead_1_n3;
		esac;
	next(firstRead_2_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n3 = 1 : 0;
			1 : firstRead_2_n3;
		esac;
	next(firstRead_3_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n3 = 1 : 0;
			1 : firstRead_3_n3;
		esac;

MODULE LNFNC_Read(nodeId, lockId, memAddr,
mem_1_addr, mem_1_data, mem_2_addr, mem_2_data, mem_3_addr, mem_3_data, lasting_1, 
cache_state_1_n1, cache_addr_1_n1, cache_data_1_n1, cache_state_2_n1, cache_addr_2_n1, cache_data_2_n1, firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
cache_state_1_n2, cache_addr_1_n2, cache_data_1_n2, cache_state_2_n2, cache_addr_2_n2, cache_data_2_n2, firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
cache_state_1_n3, cache_addr_1_n3, cache_data_1_n3, cache_state_2_n3, cache_addr_2_n3, cache_data_2_n3, firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3,
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner,
random)
ASSIGN
--Raed right lock, not first read, not in cache
	next(cache_addr_1_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : mem_1_addr;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : mem_2_addr;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : mem_3_addr;
			1 : cache_addr_1_n1;
		esac;		
	next(cache_data_1_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : mem_1_data;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : mem_2_data;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : mem_3_data;
			1 : cache_data_1_n1;
		esac;
	next(cache_state_1_n1) := 
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((memAddr = mem_1_addr & firstRead_1_n1 = 0) | (memAddr = mem_2_addr & firstRead_2_n1 = 0) | (memAddr = mem_3_addr & firstRead_3_n1 = 0)) & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : valid;
			1 : cache_state_1_n1;
		esac;
	next(cache_addr_2_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : mem_1_addr;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : mem_2_addr;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : mem_3_addr;
			1 : cache_addr_2_n1;
		esac;		
	next(cache_data_2_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : mem_1_data;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : mem_2_data;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n1 = 0 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : mem_3_data;
			1 : cache_data_2_n1;
		esac;
	next(cache_state_2_n1) := 
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((memAddr = mem_1_addr & firstRead_1_n1 = 0) | (memAddr = mem_2_addr & firstRead_2_n1 = 0) | (memAddr = mem_3_addr & firstRead_3_n1 = 0)) & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : valid;
			1 : cache_state_2_n1;
		esac;

	next(mem_1_data) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
		 	nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;
			1 : mem_1_data;
		esac;
	next(mem_2_data) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_2_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_2_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_2_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_2_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
		 	nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_2_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_2_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;
			1 : mem_2_data;
		esac;
	next(mem_3_data) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_3_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_3_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_3_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_3_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
		 	nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_3_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_3_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;
			1 : mem_3_data;
		esac;
		






	next(lasting_1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & mem_1_data != cache_data_1_n1 : 0;
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & mem_1_data != cache_data_2_n1 : 0;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & mem_1_data != cache_data_1_n2 : 0;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & mem_1_data != cache_data_2_n2 : 0;
		 	nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & mem_1_data != cache_data_1_n3 : 0;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & mem_1_data != cache_data_2_n3 : 0;
			1 : lasting_1;
		esac;



	next(cache_addr_1_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : mem_1_addr;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : mem_2_addr;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : mem_3_addr;
			1 : cache_addr_1_n2;
		esac;		
	next(cache_data_1_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : mem_1_data;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : mem_2_data;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : mem_3_data;
			1 : cache_data_1_n2;
		esac;
	next(cache_state_1_n2) := 
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((memAddr = mem_1_addr & firstRead_1_n2 = 0) | (memAddr = mem_2_addr & firstRead_2_n2 = 0) | (memAddr = mem_3_addr & firstRead_3_n2 = 0)) & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : valid;
			1 : cache_state_1_n2;
		esac;
	next(cache_addr_2_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : mem_1_addr;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : mem_2_addr;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : mem_3_addr;
			1 : cache_addr_2_n2;
		esac;		
	next(cache_data_2_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : mem_1_data;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : mem_2_data;
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n2 = 0 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : mem_3_data;
			1 : cache_data_2_n2;
		esac;
	next(cache_state_2_n2) := 
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((memAddr = mem_1_addr & firstRead_1_n2 = 0) | (memAddr = mem_2_addr & firstRead_2_n2 = 0) | (memAddr = mem_3_addr & firstRead_3_n2 = 0)) & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : valid;
			1 : cache_state_2_n2;
		esac;

	next(cache_addr_1_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : mem_1_addr;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : mem_2_addr;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : mem_3_addr;
			1 : cache_addr_1_n3;
		esac;		
	next(cache_data_1_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : mem_1_data;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : mem_2_data;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : mem_3_data;
			1 : cache_data_1_n3;
		esac;
	next(cache_state_1_n3) := 
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((memAddr = mem_1_addr & firstRead_1_n3 = 0) | (memAddr = mem_2_addr & firstRead_2_n3 = 0) | (memAddr = mem_3_addr & firstRead_3_n3 = 0)) & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : valid;
			1 : cache_state_1_n3;
		esac;
	next(cache_addr_2_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : mem_1_addr;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : mem_2_addr;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : mem_3_addr;
			1 : cache_addr_2_n3;
		esac;		
	next(cache_data_2_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_1_addr & firstRead_1_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : mem_1_data;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_2_addr & firstRead_2_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : mem_2_data;
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & memAddr = mem_3_addr & firstRead_3_n3 = 0 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : mem_3_data;
			1 : cache_data_2_n3;
		esac;
	next(cache_state_2_n3) := 
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((memAddr = mem_1_addr & firstRead_1_n3 = 0) | (memAddr = mem_2_addr & firstRead_2_n3 = 0) | (memAddr = mem_3_addr & firstRead_3_n3 = 0)) & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : valid;
			1 : cache_state_2_n3;
		esac;

MODULE NLNC_Write(nodeId, lockId, memAddr, data,
mem_1_addr, mem_1_data, mem_2_addr, mem_2_data, mem_3_addr, mem_3_data, lasting_1, 
cache_state_1_n1, cache_addr_1_n1, cache_data_1_n1, cache_state_2_n1, cache_addr_2_n1, cache_data_2_n1, firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
cache_state_1_n2, cache_addr_1_n2, cache_data_1_n2, cache_state_2_n2, cache_addr_2_n2, cache_data_2_n2, firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
cache_state_1_n3, cache_addr_1_n3, cache_data_1_n3, cache_state_2_n3, cache_addr_2_n3, cache_data_2_n3, firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3,
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner,
random)
--no lock(write back), not in cache
ASSIGN
	next(cache_addr_1_n1) := 
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : memAddr;
			1 : cache_addr_1_n1;
		esac;		
	next(cache_data_1_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : data;
		  1 : cache_data_1_n1;
		esac;
	next(cache_state_1_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : dirty;
			1 : cache_state_1_n1;
		esac;	
	next(cache_addr_2_n1) := 
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : memAddr;
			1 : cache_addr_2_n1;
		esac;		
	next(cache_data_2_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : data;
		  1 : cache_data_2_n1;
		esac;
	next(cache_state_2_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : dirty;
			1 : cache_state_2_n1;
		esac;	
	
	next(mem_1_data) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;			
			1 : mem_1_data;
		esac;	
	next(mem_2_data) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_2_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_2_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_2_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_2_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_2_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_2_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;			
			1 : mem_2_data;
		esac;
	next(mem_3_data) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_3_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) : cache_data_1_n1;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_3_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) : cache_data_2_n1;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_3_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : cache_data_1_n2;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_3_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : cache_data_2_n2;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_3_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : cache_data_1_n3;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_3_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : cache_data_2_n3;			
			1 : mem_3_data;
		esac;	
		






	next(lasting_1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_1_n1 = dirty & cache_addr_1_n1 = mem_1_addr & memAddr != cache_addr_1_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 1)) & mem_1_data != cache_data_1_n1 : 0;
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_state_2_n1 = dirty & cache_addr_2_n1 = mem_1_addr & memAddr != cache_addr_2_n1 & ((cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) & ((cache_state_1_n1 != invalid & cache_state_2_n1 = invalid) | (cache_state_1_n1 != invalid & cache_state_2_n1 != invalid & random = 2)) & mem_1_data != cache_data_2_n1 : 0;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_1_n2 = dirty & cache_addr_1_n2 = mem_1_addr & memAddr != cache_addr_1_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) & mem_1_data != cache_data_1_n2 : 0;
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_state_2_n2 = dirty & cache_addr_2_n2 = mem_1_addr & memAddr != cache_addr_2_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) & mem_1_data != cache_data_2_n2 : 0;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_1_n3 = dirty & cache_addr_1_n3 = mem_1_addr & memAddr != cache_addr_1_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) & mem_1_data != cache_data_1_n3 : 0;
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_state_2_n3 = dirty & cache_addr_2_n3 = mem_1_addr & memAddr != cache_addr_2_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) & mem_1_data != cache_data_2_n3 : 0;			
			1 : lasting_1;
		esac;	






	next(cache_addr_1_n2) := 
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : memAddr;
			1 : cache_addr_1_n2;
		esac;		
	next(cache_data_1_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : data;
		  1 : cache_data_1_n2;
		esac;
	next(cache_state_1_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 1)) : dirty;
			1 : cache_state_1_n2;
		esac;	
	next(cache_addr_2_n2) := 
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : memAddr;
			1 : cache_addr_2_n2;
		esac;		
	next(cache_data_2_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : data;
		  1 : cache_data_2_n2;
		esac;
	next(cache_state_2_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & ((cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) & ((cache_state_1_n2 != invalid & cache_state_2_n2 = invalid) | (cache_state_1_n2 != invalid & cache_state_2_n2 != invalid & random = 2)) : dirty;
			1 : cache_state_2_n2;
		esac;	
	
	next(cache_addr_1_n3) := 
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : memAddr;
			1 : cache_addr_1_n3;
		esac;		
	next(cache_data_1_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : data;
		  1 : cache_data_1_n3;
		esac;
	next(cache_state_1_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 1)) : dirty;
			1 : cache_state_1_n3;
		esac;	
	next(cache_addr_2_n3) := 
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : memAddr;
			1 : cache_addr_2_n3;
		esac;		
	next(cache_data_2_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : data;
		  1 : cache_data_2_n3;
		esac;
	next(cache_state_2_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & ((cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr)) & ((cache_state_1_n3 != invalid & cache_state_2_n3 = invalid) | (cache_state_1_n3 != invalid & cache_state_2_n3 != invalid & random = 2)) : dirty;
			1 : cache_state_2_n3;
		esac;			

MODULE NLC_Write(nodeId, lockId, memAddr, data,
mem_1_addr, mem_1_data, mem_2_addr, mem_2_data, mem_3_addr, mem_3_data, lasting_1, 
cache_state_1_n1, cache_addr_1_n1, cache_data_1_n1, cache_state_2_n1, cache_addr_2_n1, cache_data_2_n1, firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
cache_state_1_n2, cache_addr_1_n2, cache_data_1_n2, cache_state_2_n2, cache_addr_2_n2, cache_data_2_n2, firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
cache_state_1_n3, cache_addr_1_n3, cache_data_1_n3, cache_state_2_n3, cache_addr_2_n3, cache_data_2_n3, firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3,
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner,
random)
--no lock(write back), in cache
ASSIGN
	next(cache_data_1_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_addr_1_n1 = memAddr & cache_state_1_n1 != invalid : data;
			1 : cache_data_1_n1;
		esac;
	next(cache_state_1_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_addr_1_n1 = memAddr & cache_state_1_n1 != invalid : dirty;
			1 : cache_state_1_n1;
		esac;
	next(cache_data_2_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_addr_2_n1 = memAddr & cache_state_2_n1 != invalid : data;
			1 : cache_data_2_n1;
		esac;
	next(cache_state_2_n1) :=
		case
			nodeId = 1 & lockId = 0 & !hasLock_n1 & cache_addr_2_n1 = memAddr & cache_state_2_n1 != invalid : dirty;
			1 : cache_state_2_n1;
		esac;
	
	next(cache_data_1_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_addr_1_n2 = memAddr & cache_state_1_n2 != invalid : data;
			1 : cache_data_1_n2;
		esac;
	next(cache_state_1_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_addr_1_n2 = memAddr & cache_state_1_n2 != invalid : dirty;
			1 : cache_state_1_n2;
		esac;
	next(cache_data_2_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_addr_2_n2 = memAddr & cache_state_2_n2 != invalid : data;
			1 : cache_data_2_n2;
		esac;
	next(cache_state_2_n2) :=
		case
			nodeId = 2 & lockId = 0 & !hasLock_n2 & cache_addr_2_n2 = memAddr & cache_state_2_n2 != invalid : dirty;
			1 : cache_state_2_n2;
		esac;
		
	next(cache_data_1_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_addr_1_n3 = memAddr & cache_state_1_n3 != invalid : data;
			1 : cache_data_1_n3;
		esac;
	next(cache_state_1_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_addr_1_n3 = memAddr & cache_state_1_n3 != invalid : dirty;
			1 : cache_state_1_n3;
		esac;
	next(cache_data_2_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_addr_2_n3 = memAddr & cache_state_2_n3 != invalid : data;
			1 : cache_data_2_n3;
		esac;
	next(cache_state_2_n3) :=
		case
			nodeId = 3 & lockId = 0 & !hasLock_n3 & cache_addr_2_n3 = memAddr & cache_state_2_n3 != invalid : dirty;
			1 : cache_state_2_n3;
		esac;

MODULE LNC_Write(nodeId, lockId, memAddr, data,
mem_1_addr, mem_1_data, mem_2_addr, mem_2_data, mem_3_addr, mem_3_data, lasting_1, 
cache_state_1_n1, cache_addr_1_n1, cache_data_1_n1, cache_state_2_n1, cache_addr_2_n1, cache_data_2_n1, firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
cache_state_1_n2, cache_addr_1_n2, cache_data_1_n2, cache_state_2_n2, cache_addr_2_n2, cache_data_2_n2, firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
cache_state_1_n3, cache_addr_1_n3, cache_data_1_n3, cache_state_2_n3, cache_addr_2_n3, cache_data_2_n3, firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3,
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner,
random)
--has right lock(write through), not in cache
ASSIGN
	next(mem_1_data) :=
		case
			mem_1_addr = memAddr & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((nodeId = 1 & hasLock_n1 = 1 & (cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) | (nodeId = 2 & hasLock_n2 = 1 & (cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) | (nodeId = 3 & hasLock_n3 = 1 & (cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr))) : data;
			1 : mem_1_data;
		esac;		
	next(mem_2_data) :=
		case
			mem_2_addr = memAddr & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((nodeId = 1 & hasLock_n1 = 1 & (cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) | (nodeId = 2 & hasLock_n2 = 1 & (cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) | (nodeId = 3 & hasLock_n3 = 1 & (cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr))) : data;
			1 : mem_2_data;
		esac;
	next(mem_3_data) :=
		case
			mem_3_addr = memAddr & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((nodeId = 1 & hasLock_n1 = 1 & (cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) | (nodeId = 2 & hasLock_n2 = 1 & (cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) | (nodeId = 3 & hasLock_n3 = 1 & (cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr))) : data;
			1 : mem_3_data;
		esac;


	next(lasting_1) :=
		case
			mem_1_addr = memAddr & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((nodeId = 1 & hasLock_n1 = 1 & (cache_state_1_n1 = invalid | cache_addr_1_n1 != memAddr) & (cache_state_2_n1 = invalid | cache_addr_2_n1 != memAddr)) | (nodeId = 2 & hasLock_n2 = 1 & (cache_state_1_n2 = invalid | cache_addr_1_n2 != memAddr) & (cache_state_2_n2 = invalid | cache_addr_2_n2 != memAddr)) | (nodeId = 3 & hasLock_n3 = 1 & (cache_state_1_n3 = invalid | cache_addr_1_n3 != memAddr) & (cache_state_2_n3 = invalid | cache_addr_2_n3 != memAddr))) : 1;
			1 : lasting_1;
		esac;		


MODULE LC_Write(nodeId, lockId, memAddr, data,
mem_1_addr, mem_1_data, mem_2_addr, mem_2_data, mem_3_addr, mem_3_data, lasting_1, 
cache_state_1_n1, cache_addr_1_n1, cache_data_1_n1, cache_state_2_n1, cache_addr_2_n1, cache_data_2_n1, firstRead_1_n1, firstRead_2_n1, firstRead_3_n1, hasLock_n1,
cache_state_1_n2, cache_addr_1_n2, cache_data_1_n2, cache_state_2_n2, cache_addr_2_n2, cache_data_2_n2, firstRead_1_n2, firstRead_2_n2, firstRead_3_n2, hasLock_n2,
cache_state_1_n3, cache_addr_1_n3, cache_data_1_n3, cache_state_2_n3, cache_addr_2_n3, cache_data_2_n3, firstRead_1_n3, firstRead_2_n3, firstRead_3_n3, hasLock_n3,
lock_1_id, lock_1_owner, lock_2_id, lock_2_owner,
random)
--has right lock(write through), in cache
ASSIGN		
	next(cache_data_1_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr) : data;
			1 : cache_data_1_n1;
		esac;
	next(cache_state_1_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr) : valid;
			1 : cache_state_1_n1;
		esac;
	next(cache_data_2_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr) : data;
			1 : cache_data_2_n1;
		esac;
	next(cache_state_2_n1) :=
		case
			nodeId = 1 & hasLock_n1 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr) : valid;
			1 : cache_state_2_n1;
		esac;

	next(mem_1_data) :=
		case
			mem_1_addr = memAddr & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((nodeId = 1 & hasLock_n1 = 1 & ((cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr))) | (nodeId = 2 & hasLock_n2 = 1 & ((cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr))) | (nodeId = 3 & hasLock_n3 = 1 & ((cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)))) : data;
			1 : mem_1_data;
		esac;		
	next(mem_2_data) :=
		case
			mem_2_addr = memAddr & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((nodeId = 1 & hasLock_n1 = 1 & ((cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr))) | (nodeId = 2 & hasLock_n2 = 1 & ((cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr))) | (nodeId = 3 & hasLock_n3 = 1 & ((cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)))) : data;
			1 : mem_2_data;
		esac;
	next(mem_3_data) :=
		case
			mem_3_addr = memAddr & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((nodeId = 1 & hasLock_n1 = 1 & ((cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr))) | (nodeId = 2 & hasLock_n2 = 1 & ((cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr))) | (nodeId = 3 & hasLock_n3 = 1 & ((cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)))) : data;
			1 : mem_3_data;
		esac;
		


	next(lasting_1) :=
		case
			mem_1_addr = memAddr & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & ((nodeId = 1 & hasLock_n1 = 1 & ((cache_state_1_n1 != invalid & cache_addr_1_n1 = memAddr) | (cache_state_2_n1 != invalid & cache_addr_2_n1 = memAddr))) | (nodeId = 2 & hasLock_n2 = 1 & ((cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr) | (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr))) | (nodeId = 3 & hasLock_n3 = 1 & ((cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr) | (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr)))) : 1;
			1 : lasting_1;
		esac;		



	next(cache_data_1_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr) : data;
			1 : cache_data_1_n2;
		esac;
	next(cache_state_1_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_1_n2 != invalid & cache_addr_1_n2 = memAddr) : valid;
			1 : cache_state_1_n2;
		esac;
	next(cache_data_2_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr) : data;
			1 : cache_data_2_n2;
		esac;
	next(cache_state_2_n2) :=
		case
			nodeId = 2 & hasLock_n2 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_2_n2 != invalid & cache_addr_2_n2 = memAddr) : valid;
			1 : cache_state_2_n2;
		esac;
		
	next(cache_data_1_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr) : data;
			1 : cache_data_1_n3;
		esac;
	next(cache_state_1_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_1_n3 != invalid & cache_addr_1_n3 = memAddr) : valid;
			1 : cache_state_1_n3;
		esac;
	next(cache_data_2_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr) : data;
			1 : cache_data_2_n3;
		esac;
	next(cache_state_2_n3) :=
		case
			nodeId = 3 & hasLock_n3 & ((lockId = lock_1_id & lock_1_owner = nodeId) | (lockId = lock_2_id & lock_2_owner = nodeId)) & (cache_state_2_n3 != invalid & cache_addr_2_n3 = memAddr) : valid;
			1 : cache_state_2_n3;
		esac;
