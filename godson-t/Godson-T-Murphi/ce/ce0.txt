This program should be regarded as a DEBUGGING aid, not as a 
certifier of correctness.
Call with the -l flag or read the license file for terms
and conditions of use.
Run this program with "-h" for the list of options.

Bugs, questions, and comments should be directed to
"melatti@di.uniroma1.it".

CMurphi compiler last modified date: Jun  2 2014
Include files last modified date:    Jul 12 2011
==========================================================================

==========================================================================
Caching Murphi Release 5.4.9
Finite-state Concurrent System Verifier.

Caching Murphi Release 5.4.9 is based on various versions of Murphi.
Caching Murphi Release 5.4.9 :
Copyright (C) 2009-2012 by Sapienza University of Rome.
Murphi release 3.1 :
Copyright (C) 1992 - 1999 by the Board of Trustees of
Leland Stanford Junior University.

==========================================================================

Protocol: godson-t-ce-0

Algorithm:
	Verification by breadth first search.
	with symmetry algorithm 3 -- Heuristic Small Memory Normalization
	with permutation trial limit 10.

Memory usage:

	* The size of each state is 320 bits (rounded up to 40 bytes).
	* The memory allocated for the hash table and state queue is
	  1073 Mbytes.
	  With two words of overhead per state, the maximum size of
	  the state space is 22002907 states.
	   * Use option "-k" or "-m" to increase this, if necessary.
	* Capacity in queue for breadth-first search: 2200290 states.
	   * Change the constant gPercentActiveStates in mu_prolog.inc
	     to increase this, if necessary.

Progress Report:

	1000 states explored in 0.83s, with 1278 rules fired and 782 states in the queue.
	2000 states explored in 0.84s, with 2639 rules fired and 1415 states in the queue.
	3000 states explored in 0.86s, with 4093 rules fired and 1979 states in the queue.
	4000 states explored in 0.88s, with 5441 rules fired and 2500 states in the queue.
	5000 states explored in 0.90s, with 6666 rules fired and 2989 states in the queue.
	6000 states explored in 0.92s, with 7860 rules fired and 3579 states in the queue.
	7000 states explored in 0.93s, with 9350 rules fired and 4153 states in the queue.
	8000 states explored in 0.95s, with 10746 rules fired and 4657 states in the queue.
	9000 states explored in 0.97s, with 11992 rules fired and 5285 states in the queue.
	10000 states explored in 0.98s, with 13266 rules fired and 5844 states in the queue.
	11000 states explored in 1.00s, with 14540 rules fired and 6398 states in the queue.
	12000 states explored in 1.02s, with 15788 rules fired and 6944 states in the queue.
	13000 states explored in 1.03s, with 17127 rules fired and 7615 states in the queue.
	14000 states explored in 1.05s, with 18515 rules fired and 8320 states in the queue.
	15000 states explored in 1.06s, with 19965 rules fired and 8989 states in the queue.
	16000 states explored in 1.08s, with 21329 rules fired and 9499 states in the queue.
	17000 states explored in 1.10s, with 22672 rules fired and 10039 states in the queue.
	18000 states explored in 1.11s, with 24121 rules fired and 10747 states in the queue.
	19000 states explored in 1.13s, with 25511 rules fired and 11355 states in the queue.
	20000 states explored in 1.14s, with 26964 rules fired and 12138 states in the queue.
	21000 states explored in 1.16s, with 28442 rules fired and 12812 states in the queue.
	22000 states explored in 1.18s, with 29714 rules fired and 13315 states in the queue.

The following is the error trace for the error:

	Invariant "Coherence, a:1, j:1, i:1" failed.

Startstate Init, d:1 fired.
memory[1].data:1
memory[2].data:1
lock[1].owner:Undefined
lock[1].beUsed:false
lock[2].owner:Undefined
lock[2].beUsed:false
node[1].cache[1].state:INVALID
node[1].cache[1].addr:Undefined
node[1].cache[1].data:Undefined
node[1].cache[2].state:INVALID
node[1].cache[2].addr:Undefined
node[1].cache[2].data:Undefined
node[1].hasLock:false
node[1].firstRead[1]:true
node[1].firstRead[2]:true
node[2].cache[1].state:INVALID
node[2].cache[1].addr:Undefined
node[2].cache[1].data:Undefined
node[2].cache[2].state:INVALID
node[2].cache[2].addr:Undefined
node[2].cache[2].data:Undefined
node[2].hasLock:false
node[2].firstRead[1]:true
node[2].firstRead[2]:true
node[3].cache[1].state:INVALID
node[3].cache[1].addr:Undefined
node[3].cache[1].data:Undefined
node[3].cache[2].state:INVALID
node[3].cache[2].addr:Undefined
node[3].cache[2].data:Undefined
node[3].hasLock:false
node[3].firstRead[1]:true
node[3].firstRead[2]:true
curNode:3
curCache:2
curMemory:2
curData:1
curLock:2
replace:NON
repRule:NONE
----------

Rule Acquire, l:1, i:1 fired.
lock[1].owner:1
lock[1].beUsed:true
node[1].hasLock:true
----------

Rule Acquire, l:2, i:2 fired.
lock[2].owner:2
lock[2].beUsed:true
node[2].hasLock:true
----------

Rule LNCFRR, l:1, a:1, i:1 fired.
curNode:1
curMemory:1
curLock:1
replace:REQUIRE
repRule:LNCFR
----------

Rule RI, i:1 fired.
replace:RANDINV
----------

Rule CRIC, j:1, i:1 fired.
curCache:1
replace:DONE
----------

Rule LNCFRD, l:1, a:1, j:1, i:1 fired.
node[1].cache[1].state:VALID
node[1].cache[1].addr:1
node[1].cache[1].data:1
node[1].firstRead[1]:false
replace:NON
repRule:NONE
----------

Rule LNCW, d:2, l:2, a:1, i:2 fired.
The last state of the trace (in full) is:
memory[1].data:2
memory[2].data:1
lock[1].owner:1
lock[1].beUsed:true
lock[2].owner:2
lock[2].beUsed:true
node[1].cache[1].state:VALID
node[1].cache[1].addr:1
node[1].cache[1].data:1
node[1].cache[2].state:INVALID
node[1].cache[2].addr:Undefined
node[1].cache[2].data:Undefined
node[1].hasLock:true
node[1].firstRead[1]:false
node[1].firstRead[2]:true
node[2].cache[1].state:INVALID
node[2].cache[1].addr:Undefined
node[2].cache[1].data:Undefined
node[2].cache[2].state:INVALID
node[2].cache[2].addr:Undefined
node[2].cache[2].data:Undefined
node[2].hasLock:true
node[2].firstRead[1]:true
node[2].firstRead[2]:true
node[3].cache[1].state:INVALID
node[3].cache[1].addr:Undefined
node[3].cache[1].data:Undefined
node[3].cache[2].state:INVALID
node[3].cache[2].addr:Undefined
node[3].cache[2].data:Undefined
node[3].hasLock:false
node[3].firstRead[1]:true
node[3].firstRead[2]:true
curNode:1
curCache:1
curMemory:1
curData:1
curLock:1
replace:NON
repRule:NONE
----------

End of the error trace.

==========================================================================

Result:

	Invariant "Coherence, a:1, j:1, i:1" failed.

State Space Explored:

	22898 states, 30862 rules fired in 1.19s.

Analysis of State Space:

	There are rules that are never fired.
	If you are running with symmetry, this may be why.  Otherwise,
	please run this program with "-pr" for the rules information.
