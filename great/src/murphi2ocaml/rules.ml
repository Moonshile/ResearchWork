[('CACHE_STATE', 'CACHE_I, CACHE_S, CACHE_E'), ('NODE_CMD', 'NODE_None, NODE_Get, NODE_GetX'), ('UNI_CMD', 'UNI_None, UNI_Get, UNI_GetX, UNI_Put, UNI_PutX, UNI_Nak'), ('INV_CMD', 'INV_None, INV_Inv, INV_InvAck'), ('RP_CMD', 'RP_None, RP_Replace'), ('WB_CMD', 'WB_None, WB_Wb'), ('SHWB_CMD', 'SHWB_None, SHWB_ShWb, SHWB_FAck'), ('NAKC_CMD', 'NAKC_None, NAKC_Nakc')]
let Store =
  let name = "Store" in
  let params = [paramdef "src" "NODE"; paramdef "data" "DATA"] in
  let formula = (eqn (var (record [global "Sta"; arr "Proc" [paramref "src"]; global "CacheState"])) (const _CACHE_E)) in
  let statement = (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "src"]; global "CacheData"]) (param (paramref "data"))); (assign (record [global "Sta"; global "CurrData"]) (param (paramref "data"))); (assign (record [global "Sta"; global "LastWrVld"]) (const (boolc true))); (assign (record [global "Sta"; global "LastWrPtr"]) (param (paramref "src")))]) in
  rule name params formula statement
        
let PI_Remote_Get =
  let name = "PI_Remote_Get" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "Proc" [paramref "src"]; global "ProcCmd"])) (const _NODE_None))]); (eqn (var (record [global "Sta"; arr "Proc" [paramref "src"]; global "CacheState"])) (const _CACHE_I))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "src"]; global "ProcCmd"]) (const _NODE_Get)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Get)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement
        
let PI_Remote_GetX =
  let name = "PI_Remote_GetX" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "Proc" [paramref "src"]; global "ProcCmd"])) (const _NODE_None))]); (eqn (var (record [global "Sta"; arr "Proc" [paramref "src"]; global "CacheState"])) (const _CACHE_I))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "src"]; global "ProcCmd"]) (const _NODE_GetX)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement
        
let PI_Remote_PutX =
  let name = "PI_Remote_PutX" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "ProcCmd"])) (const _NODE_None))]); (eqn (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"])) (const _CACHE_E))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; global "WbMsg"; global "Cmd"]) (const _WB_Wb)); (assign (record [global "Sta"; global "WbMsg"; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; global "WbMsg"; global "Data"]) (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheData"])))]) in
  rule name params formula statement
        
let PI_Remote_Replace =
  let name = "PI_Remote_Replace" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "Proc" [paramref "src"]; global "ProcCmd"])) (const _NODE_None))]); (eqn (var (record [global "Sta"; arr "Proc" [paramref "src"]; global "CacheState"])) (const _CACHE_S))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "src"]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr "RpMsg" [paramref "src"]; global "Cmd"]) (const _RP_Replace))]) in
  rule name params formula statement
        
let NI_Nak =
  let name = "NI_Nak" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "dst"]; global "Cmd"])) (const _UNI_Nak)) in
  let statement = (parallel [(assign (record [global "Sta"; arr "UniMsg" [paramref "dst"]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "InvMarked"]) (const (boolc false)))]) in
  rule name params formula statement
        
let NI_Local_Get_Nak =
  let name = "NI_Local_Get_Nak" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr "RpMsg" [paramref "src"]; global "Cmd"])) (const _RP_Replace)))]); (orList [(orList [(eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _True)); (andList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"])) (const _CACHE_E)))])]); (andList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))])])]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement
        
let NI_Local_Get_Get =
  let name = "NI_Local_Get_Get" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr "RpMsg" [paramref "src"]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Get)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (ifStatement (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home")))) (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_Get))); (assign (record [global "Sta"; global "Requester"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement
        
let NI_Local_Get_Put =
  let name = "NI_Local_Get_Put" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (var (global "Home")))]); (neg (eqn (var (record [global "Sta"; arr "RpMsg" [paramref "src"]; global "Cmd"])) (const _RP_Replace)))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (imply (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True)) (andList [(eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True)); (eqn (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"])) (const _CACHE_E))]))]) in
  let statement = (ifelseStatement (var (record [global "Sta"; global "Dir"; global "Dirty"])) (parallel [(assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "MemData"]) (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheData"]))); (assign (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Data"]) (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheData"])))]) (parallel [(ifelseStatement (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (parallel [(assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; arr "ShrSet" [paramref "src"]]) (const (boolc true))); (forStatement (assign (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "p"]]) (var (record [global "(p = src) | Sta"; global "Dir"; arr "ShrSet" [paramref "p"]]))) [paramdef "p" "NODE"])]) (parallel [(assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src")))])); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Data"]) (var (record [global "Sta"; global "MemData"])))])) in
  rule name params formula statement
        
let NI_Remote_Get_Nak =
  let name = "NI_Remote_Get_Nak" in
  let params = [paramdef "src" "NODE"; paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (param (paramref "dst")))]); (neg (eqn (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"])) (const _CACHE_E)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; global "NakcMsg"; global "Cmd"]) (const _NAKC_Nakc)); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement
        
let NI_Remote_Get_Put =
  let name = "NI_Remote_Get_Put" in
  let params = [paramdef "src" "NODE"; paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_Get))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (param (paramref "dst")))]); (eqn (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"])) (const _CACHE_E))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Put)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Data"]) (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheData"]))); (ifStatement (neg (eqn (param (paramref "src")) (var (global "Home")))) (parallel [(assign (record [global "Sta"; global "ShWbMsg"; global "Cmd"]) (const _SHWB_ShWb)); (assign (record [global "Sta"; global "ShWbMsg"; global "Proc"]) (param (paramref "src"))); (assign (record [global "Sta"; global "ShWbMsg"; global "Data"]) (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheData"])))])); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement
        
let NI_Local_GetX_Nak =
  let name = "NI_Local_GetX_Nak" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (var (global "Home")))]); (orList [(orList [(eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _True)); (andList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True))]); (neg (eqn (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"])) (const _CACHE_E)))])]); (andList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))])])]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home")))]) in
  rule name params formula statement
        
let NI_Local_GetX_GetX =
  let name = "NI_Local_GetX_GetX" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _False))]); (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))))]) in
  let statement = (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_GetX)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))); (ifStatement (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (var (global "Home")))) (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_GetX))); (assign (record [global "Sta"; global "Requester"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false)))]) in
  rule name params formula statement
        
let NI_Local_GetX_PutX =
  let name = "NI_Local_GetX_PutX" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (var (global "Home")))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _False))]); (imply (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _True)) (andList [(eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True)); (eqn (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"])) (const _CACHE_E))]))]) in
  let statement = (ifelseStatement (var (record [global "Sta"; global "Dir"; global "Dirty"])) (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr "ShrSet" [paramref "p"]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "p"]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Data"]) (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheData"]))); (assign (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"]) (const _CACHE_I))]) (ifelseStatement (imply (eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)) (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src"))); (forallFormula ~types [paramdef "p" "NODE"] (imply (neg (eqn (param (paramref "p")) (param (paramref "src")))) (eqn (var (record [global "Sta"; global "Dir"; arr "ShrSet" [paramref "p"]])) (const _False))))])) (parallel [(assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr "ShrSet" [paramref "p"]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "p"]]) (const (boolc false)))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (assign (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"]) (const _CACHE_I)); (ifStatement (var (record [global "Sta"; global "Dir"; global "Local"])) (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"]) (const _CACHE_I)); (ifStatement (eqn (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "ProcCmd"])) (const _NODE_Get)) (assign (record [global "Sta"; arr "Proc" [paramref "Home"]; global "InvMarked"]) (const (boolc true))))]))]) (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; global "Dirty"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadVld"]) (const (boolc true))); (assign (record [global "Sta"; global "Dir"; global "HeadPtr"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Dir"; global "ShrVld"]) (const (boolc false))); (forStatement (parallel [(assign (record [global "Sta"; global "Dir"; arr "ShrSet" [paramref "p"]]) (const (boolc false))); (ifelseStatement (andList [(andList [(neg (eqn (param (paramref "p")) (var (global "Home")))); (neg (eqn (param (paramref "p")) (param (paramref "src"))))]); (orList [(andList [(eqn (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; arr "ShrSet" [paramref "p"]])) (const _True))]); (andList [(eqn (var (record [global "Sta"; global "Dir"; global "HeadVld"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "p")))])])]) (parallel [(assign (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "p"]]) (const (boolc true))); (assign (record [global "Sta"; arr "InvMsg" [paramref "p"]; global "Cmd"]) (const _INV_Inv))]) (parallel [(assign (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "p"]]) (const (boolc false))); (assign (record [global "Sta"; arr "InvMsg" [paramref "p"]; global "Cmd"]) (const _INV_None))]))]) [paramdef "p" "NODE"]); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (var (global "Home"))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Data"]) (var (record [global "Sta"; global "MemData"]))); (ifStatement (var (record [global "Sta"; global "Dir"; global "Local"])) (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "Home"]; global "CacheState"]) (const _CACHE_I)); (ifStatement (eqn (var (record [global "Sta"; arr "Proc" [paramref "Home"]; global "ProcCmd"])) (const _NODE_Get)) (assign (record [global "Sta"; arr "Proc" [paramref "Home"]; global "InvMarked"]) (const (boolc true))))])); (assign (record [global "Sta"; global "Requester"]) (param (paramref "src"))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc true))); (assign (record [global "Sta"; global "PrevData"]) (var (record [global "Sta"; global "CurrData"]))); (ifelseStatement (neg (eqn (var (record [global "Sta"; global "Dir"; global "HeadPtr"])) (param (paramref "src")))) (assign (record [global "Sta"; global "LastOtherInvAck"]) (var (record [global "Sta"; global "Dir"; global "HeadPtr"]))) (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr "ShrSet" [paramref "p"]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"]))]))) in
  rule name params formula statement
        
let NI_Remote_GetX_Nak =
  let name = "NI_Remote_GetX_Nak" in
  let params = [paramdef "src" "NODE"; paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (param (paramref "dst")))]); (neg (eqn (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"])) (const _CACHE_E)))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_Nak)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; global "NakcMsg"; global "Cmd"]) (const _NAKC_Nakc)); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement
        
let NI_Remote_GetX_PutX =
  let name = "NI_Remote_GetX_PutX" in
  let params = [paramdef "src" "NODE"; paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(andList [(andList [(neg (eqn (param (paramref "src")) (param (paramref "dst")))); (neg (eqn (param (paramref "dst")) (var (global "Home"))))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"])) (const _UNI_GetX))]); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"])) (param (paramref "dst")))]); (eqn (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"])) (const _CACHE_E))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"]) (const _CACHE_I)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Cmd"]) (const _UNI_PutX)); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Proc"]) (param (paramref "dst"))); (assign (record [global "Sta"; arr "UniMsg" [paramref "src"]; global "Data"]) (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheData"]))); (ifStatement (neg (eqn (param (paramref "src")) (var (global "Home")))) (parallel [(assign (record [global "Sta"; global "ShWbMsg"; global "Cmd"]) (const _SHWB_FAck)); (assign (record [global "Sta"; global "ShWbMsg"; global "Proc"]) (param (paramref "src")))])); (assign (record [global "Sta"; global "FwdCmd"]) (const _UNI_None)); (assign (record [global "Sta"; global "FwdSrc"]) (param (paramref "src")))]) in
  rule name params formula statement
        
let NI_Remote_Put =
  let name = "NI_Remote_Put" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "dst"]; global "Cmd"])) (const _UNI_Put))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "UniMsg" [paramref "dst"]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "ProcCmd"]) (const _NODE_None)); (ifelseStatement (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "InvMarked"])) (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"]) (const _CACHE_I))]) (parallel [(assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"]) (const _CACHE_S)); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheData"]) (var (record [global "Sta"; arr "UniMsg" [paramref "dst"]; global "Data"])))]))]) in
  rule name params formula statement
        
let NI_Remote_PutX =
  let name = "NI_Remote_PutX" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "UniMsg" [paramref "dst"]; global "Cmd"])) (const _UNI_PutX))]); (eqn (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "ProcCmd"])) (const _NODE_GetX))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "UniMsg" [paramref "dst"]; global "Cmd"]) (const _UNI_None)); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "ProcCmd"]) (const _NODE_None)); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "InvMarked"]) (const (boolc false))); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"]) (const _CACHE_E)); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheData"]) (var (record [global "Sta"; arr "UniMsg" [paramref "dst"]; global "Data"])))]) in
  rule name params formula statement
        
let NI_Inv =
  let name = "NI_Inv" in
  let params = [paramdef "dst" "NODE"] in
  let formula = (andList [(neg (eqn (param (paramref "dst")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "InvMsg" [paramref "dst"]; global "Cmd"])) (const _INV_Inv))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "InvMsg" [paramref "dst"]; global "Cmd"]) (const _INV_InvAck)); (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "CacheState"]) (const _CACHE_I)); (ifStatement (eqn (var (record [global "Sta"; arr "Proc" [paramref "dst"]; global "ProcCmd"])) (const _NODE_Get)) (assign (record [global "Sta"; arr "Proc" [paramref "dst"]; global "InvMarked"]) (const (boolc true))))]) in
  rule name params formula statement
        
let NI_InvAck =
  let name = "NI_InvAck" in
  let params = [paramdef "src" "NODE"] in
  let formula = (andList [(andList [(andList [(neg (eqn (param (paramref "src")) (var (global "Home")))); (eqn (var (record [global "Sta"; arr "InvMsg" [paramref "src"]; global "Cmd"])) (const _INV_InvAck))]); (eqn (var (record [global "Sta"; global "Dir"; global "Pending"])) (const _True))]); (eqn (var (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "src"]])) (const _True))]) in
  let statement = (parallel [(assign (record [global "Sta"; arr "InvMsg" [paramref "src"]; global "Cmd"]) (const _INV_None)); (assign (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "src"]]) (const (boolc false))); (ifelseStatement (existFormula ~types [paramdef "p" "NODE"] (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "p"]])) (const _True))])) (parallel [(assign (record [global "Sta"; global "LastInvAck"]) (param (paramref "src"))); (forStatement (ifStatement (andList [(neg (eqn (param (paramref "p")) (param (paramref "src")))); (eqn (var (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "p"]])) (const _True))]) (assign (record [global "Sta"; global "LastOtherInvAck"]) (param (paramref "p")))) [paramdef "p" "NODE"])]) (parallel [(assign (record [global "Sta"; global "Dir"; global "Pending"]) (const (boolc false))); (ifStatement (andList [(eqn (var (record [global "Sta"; global "Dir"; global "Local"])) (const _True)); (eqn (var (record [global "Sta"; global "Dir"; global "Dirty"])) (const _False))]) (assign (record [global "Sta"; global "Dir"; global "Local"]) (const (boolc false)))); (assign (record [global "Sta"; global "Collecting"]) (const (boolc false))); (assign (record [global "Sta"; global "LastInvAck"]) (param (paramref "src")))]))]) in
  rule name params formula statement
        
let NI_Replace =
  let name = "NI_Replace" in
  let params = [paramdef "src" "NODE"] in
  let formula = (eqn (var (record [global "Sta"; arr "RpMsg" [paramref "src"]; global "Cmd"])) (const _RP_Replace)) in
  let statement = (parallel [(assign (record [global "Sta"; arr "RpMsg" [paramref "src"]; global "Cmd"]) (const _RP_None)); (ifStatement (var (record [global "Sta"; global "Dir"; global "ShrVld"])) (parallel [(assign (record [global "Sta"; global "Dir"; arr "ShrSet" [paramref "src"]]) (const (boolc false))); (assign (record [global "Sta"; global "Dir"; arr "InvSet" [paramref "src"]]) (const (boolc false)))]))]) in
  rule name params formula statement
        
